{
  "ID": "78",
  "Name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
  "Abstraction": "Base",
  "Structure": "Simple",
  "Status": "Stable",
  "Diagram": "/data/images/CWE-78-Diagram.png",
  "Description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
  "ExtendedDescription": "\n\nThis weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.\n\n\nThere are at least two subtypes of OS command injection:\n\n\n  - The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.\n\n  - The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.\n\nFrom a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.",
  "LikelihoodOfExploit": "High",
  "RelatedWeaknesses.0.Nature": "ChildOf",
  "RelatedWeaknesses.0.CweID": "77",
  "RelatedWeaknesses.0.ViewID": "1000",
  "RelatedWeaknesses.0.Ordinal": "Primary",
  "RelatedWeaknesses.1.Nature": "ChildOf",
  "RelatedWeaknesses.1.CweID": "74",
  "RelatedWeaknesses.1.ViewID": "1003",
  "RelatedWeaknesses.1.Ordinal": "Primary",
  "RelatedWeaknesses.2.Nature": "ChildOf",
  "RelatedWeaknesses.2.CweID": "77",
  "RelatedWeaknesses.2.ViewID": "1305",
  "RelatedWeaknesses.2.Ordinal": "Primary",
  "RelatedWeaknesses.3.Nature": "ChildOf",
  "RelatedWeaknesses.3.CweID": "77",
  "RelatedWeaknesses.3.ViewID": "1340",
  "RelatedWeaknesses.3.Ordinal": "Primary",
  "RelatedWeaknesses.4.Nature": "CanAlsoBe",
  "RelatedWeaknesses.4.CweID": "88",
  "RelatedWeaknesses.4.ViewID": "1000",
  "ApplicablePlatforms.0.Type": "Language",
  "ApplicablePlatforms.0.Class": "Not Language-Specific",
  "ApplicablePlatforms.0.Prevalence": "Undetermined",
  "AlternateTerms.0.Term": "Shell injection",
  "AlternateTerms.1.Term": "Shell metacharacters",
  "AlternateTerms.2.Term": "OS Command Injection",
  "ModesOfIntroduction.0.Phase": "Implementation",
  "ModesOfIntroduction.0.Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic.",
  "CommonConsequences.0.Scope.0": "Confidentiality",
  "CommonConsequences.0.Scope.1": "Integrity",
  "CommonConsequences.0.Scope.2": "Availability",
  "CommonConsequences.0.Scope.3": "Non-Repudiation",
  "CommonConsequences.0.Impact.0": "Execute Unauthorized Code or Commands",
  "CommonConsequences.0.Impact.1": "DoS: Crash, Exit, or Restart",
  "CommonConsequences.0.Impact.2": "Read Files or Directories",
  "CommonConsequences.0.Impact.3": "Modify Files or Directories",
  "CommonConsequences.0.Impact.4": "Read Application Data",
  "CommonConsequences.0.Impact.5": "Modify Application Data",
  "CommonConsequences.0.Impact.6": "Hide Activities",
  "CommonConsequences.0.Note": "Attackers could execute unauthorized operating system commands, which could then be used to disable the product, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.",
  "DetectionMethods.0.DetectionMethodID": "DM-1",
  "DetectionMethods.0.Method": "Automated Static Analysis",
  "DetectionMethods.0.Description": "\n\nThis weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.\n\n\nAutomated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.\n\n\nAutomated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis.\n",
  "DetectionMethods.0.EffectivenessNotes": "This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
  "DetectionMethods.1.DetectionMethodID": "DM-2",
  "DetectionMethods.1.Method": "Automated Dynamic Analysis",
  "DetectionMethods.1.Description": "This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
  "DetectionMethods.1.Effectiveness": "Moderate",
  "DetectionMethods.2.DetectionMethodID": "DM-10",
  "DetectionMethods.2.Method": "Manual Static Analysis",
  "DetectionMethods.2.Description": "Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.",
  "DetectionMethods.2.Effectiveness": "High",
  "DetectionMethods.3.Method": "Automated Static Analysis - Binary or Bytecode",
  "DetectionMethods.3.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis",
  "DetectionMethods.3.Effectiveness": "High",
  "DetectionMethods.4.Method": "Dynamic Analysis with Automated Results Interpretation",
  "DetectionMethods.4.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners",
  "DetectionMethods.4.Effectiveness": "SOAR Partial",
  "DetectionMethods.5.Method": "Dynamic Analysis with Manual Results Interpretation",
  "DetectionMethods.5.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer",
  "DetectionMethods.5.Effectiveness": "SOAR Partial",
  "DetectionMethods.6.Method": "Manual Static Analysis - Source Code",
  "DetectionMethods.6.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source",
  "DetectionMethods.6.Effectiveness": "High",
  "DetectionMethods.7.Method": "Automated Static Analysis - Source Code",
  "DetectionMethods.7.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer",
  "DetectionMethods.7.Effectiveness": "High",
  "DetectionMethods.8.Method": "Architecture or Design Review",
  "DetectionMethods.8.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
  "DetectionMethods.8.Effectiveness": "High",
  "PotentialMitigations.0.Phase.0": "Architecture and Design",
  "PotentialMitigations.0.Description": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
  "PotentialMitigations.1.MitigationID": "MIT-22",
  "PotentialMitigations.1.Phase.0": "Architecture and Design",
  "PotentialMitigations.1.Phase.1": "Operation",
  "PotentialMitigations.1.Strategy": "Sandbox or Jail",
  "PotentialMitigations.1.Description": "\n\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n",
  "PotentialMitigations.1.Effectiveness": "Limited",
  "PotentialMitigations.1.EffectivenessNotes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
  "PotentialMitigations.2.Phase.0": "Architecture and Design",
  "PotentialMitigations.2.Strategy": "Attack Surface Reduction",
  "PotentialMitigations.2.Description": "For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.",
  "PotentialMitigations.3.MitigationID": "MIT-15",
  "PotentialMitigations.3.Phase.0": "Architecture and Design",
  "PotentialMitigations.3.Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
  "PotentialMitigations.4.MitigationID": "MIT-4.3",
  "PotentialMitigations.4.Phase.0": "Architecture and Design",
  "PotentialMitigations.4.Strategy": "Libraries or Frameworks",
  "PotentialMitigations.4.Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.\n",
  "PotentialMitigations.5.MitigationID": "MIT-28",
  "PotentialMitigations.5.Phase.0": "Implementation",
  "PotentialMitigations.5.Strategy": "Output Encoding",
  "PotentialMitigations.5.Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
  "PotentialMitigations.6.Phase.0": "Implementation",
  "PotentialMitigations.6.Description": "If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.",
  "PotentialMitigations.7.MitigationID": "MIT-27",
  "PotentialMitigations.7.Phase.0": "Architecture and Design",
  "PotentialMitigations.7.Strategy": "Parameterization",
  "PotentialMitigations.7.Description": "\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\n\nSome languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.\n",
  "PotentialMitigations.8.MitigationID": "MIT-5",
  "PotentialMitigations.8.Phase.0": "Implementation",
  "PotentialMitigations.8.Strategy": "Input Validation",
  "PotentialMitigations.8.Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.\n\n\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like \";\" and \">\" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.\n\n\nEven if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.\n",
  "PotentialMitigations.9.MitigationID": "MIT-21",
  "PotentialMitigations.9.Phase.0": "Architecture and Design",
  "PotentialMitigations.9.Strategy": "Enforcement by Conversion",
  "PotentialMitigations.9.Description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
  "PotentialMitigations.10.MitigationID": "MIT-32",
  "PotentialMitigations.10.Phase.0": "Operation",
  "PotentialMitigations.10.Strategy": "Compilation or Build Hardening",
  "PotentialMitigations.10.Description": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
  "PotentialMitigations.11.MitigationID": "MIT-32",
  "PotentialMitigations.11.Phase.0": "Operation",
  "PotentialMitigations.11.Strategy": "Environment Hardening",
  "PotentialMitigations.11.Description": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
  "PotentialMitigations.12.MitigationID": "MIT-39",
  "PotentialMitigations.12.Phase.0": "Implementation",
  "PotentialMitigations.12.Description": "\n\nEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\n\n\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\n\n\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\n\nIn the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.\n",
  "PotentialMitigations.13.Phase.0": "Operation",
  "PotentialMitigations.13.Strategy": "Sandbox or Jail",
  "PotentialMitigations.13.Description": "Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.",
  "PotentialMitigations.14.MitigationID": "MIT-29",
  "PotentialMitigations.14.Phase.0": "Operation",
  "PotentialMitigations.14.Strategy": "Firewall",
  "PotentialMitigations.14.Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
  "PotentialMitigations.14.Effectiveness": "Moderate",
  "PotentialMitigations.14.EffectivenessNotes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
  "PotentialMitigations.15.MitigationID": "MIT-17",
  "PotentialMitigations.15.Phase.0": "Architecture and Design",
  "PotentialMitigations.15.Phase.1": "Operation",
  "PotentialMitigations.15.Strategy": "Environment Hardening",
  "PotentialMitigations.15.Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
  "PotentialMitigations.16.MitigationID": "MIT-16",
  "PotentialMitigations.16.Phase.0": "Operation",
  "PotentialMitigations.16.Phase.1": "Implementation",
  "PotentialMitigations.16.Strategy": "Environment Hardening",
  "PotentialMitigations.16.Description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
  "DemonstrativeExamples.0.ID": "DX-151",
  "DemonstrativeExamples.0.Entries.0.IntroText": "This example code intends to take the name of a user and list the contents of that user's home directory. It is subject to the first variant of OS command injection.",
  "DemonstrativeExamples.0.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.0.Entries.1.Language": "PHP",
  "DemonstrativeExamples.0.Entries.1.ExampleCode": "```\n\t$userName = $_POST[\"user\"];\n\t$command = 'ls -l /home/' . $userName;\n\tsystem($command);\n```",
  "DemonstrativeExamples.0.Entries.2.BodyText": "The $userName variable is not checked for malicious input. An attacker could set the $userName variable to an arbitrary OS command such as:",
  "DemonstrativeExamples.0.Entries.3.Nature": "Attack",
  "DemonstrativeExamples.0.Entries.3.ExampleCode": "```\n\t;rm -rf /\n```",
  "DemonstrativeExamples.0.Entries.4.BodyText": "Which would result in $command being:",
  "DemonstrativeExamples.0.Entries.5.Nature": "Result",
  "DemonstrativeExamples.0.Entries.5.ExampleCode": "```\n\tls -l /home/;rm -rf /\n```",
  "DemonstrativeExamples.0.Entries.6.BodyText": "Since the semi-colon is a command separator in Unix, the OS would first execute the ls command, then the rm command, deleting the entire file system.",
  "DemonstrativeExamples.0.Entries.7.BodyText": "Also note that this example code is vulnerable to Path Traversal (CWE-22) and Untrusted Search Path (CWE-426) attacks.",
  "DemonstrativeExamples.1.ID": "DX-30",
  "DemonstrativeExamples.1.Entries.0.IntroText": "The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.",
  "DemonstrativeExamples.1.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.1.Entries.1.Language": "C",
  "DemonstrativeExamples.1.Entries.1.ExampleCode": "```\n\tint main(int argc, char** argv) {\n\t\tchar cmd[CMD_MAX] = \"/usr/bin/cat \";\n\t\tstrcat(cmd, argv[1]);\n\t\tsystem(cmd);\n\t}\n```",
  "DemonstrativeExamples.1.Entries.2.BodyText": "Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form \";rm -rf /\", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.",
  "DemonstrativeExamples.1.Entries.3.BodyText": "Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120).",
  "DemonstrativeExamples.2.Entries.0.IntroText": "This example is a web application that intends to perform a DNS lookup of a user-supplied domain name. It is subject to the first variant of OS command injection.",
  "DemonstrativeExamples.2.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.2.Entries.1.Language": "Perl",
  "DemonstrativeExamples.2.Entries.1.ExampleCode": "```\n\tuse CGI qw(:standard);\n\t$name = param('name');\n\t$nslookup = \"/path/to/nslookup\";\n\tprint header;\n\tif (open($fh, \"$nslookup $name|\")) {\n\t\twhile (<$fh>) {\n\t\t\tprint escapeHTML($_);\n\t\t\tprint \"<br>\\n\";\n\t\t}\n\t\tclose($fh);\n\t}\n```",
  "DemonstrativeExamples.2.Entries.2.BodyText": "Suppose an attacker provides a domain name like this:",
  "DemonstrativeExamples.2.Entries.3.Nature": "Attack",
  "DemonstrativeExamples.2.Entries.3.ExampleCode": "```\n\tcwe.mitre.org%20%3B%20/bin/ls%20-l\n```",
  "DemonstrativeExamples.2.Entries.4.BodyText": "The \"%3B\" sequence decodes to the \";\" character, and the %20 decodes to a space. The open() statement would then process a string like this:",
  "DemonstrativeExamples.2.Entries.5.Nature": "Result",
  "DemonstrativeExamples.2.Entries.5.ExampleCode": "```\n\t/path/to/nslookup cwe.mitre.org ; /bin/ls -l\n```",
  "DemonstrativeExamples.2.Entries.6.BodyText": "As a result, the attacker executes the \"/bin/ls -l\" command and gets a list of all the files in the program's working directory. The input could be replaced with much more dangerous commands, such as installing a malicious program on the server.",
  "DemonstrativeExamples.3.Entries.0.IntroText": "The example below reads the name of a shell script to execute from the system properties. It is subject to the second variant of OS command injection.",
  "DemonstrativeExamples.3.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.3.Entries.1.Language": "Java",
  "DemonstrativeExamples.3.Entries.1.ExampleCode": "```\n\tString script = System.getProperty(\"SCRIPTNAME\");\n\tif (script != null)\n\t\tSystem.exec(script);\n```",
  "DemonstrativeExamples.3.Entries.2.BodyText": "If an attacker has control over this property, then they could modify the property to point to a dangerous program.",
  "DemonstrativeExamples.4.Entries.0.IntroText": "In the example below, a method is used to transform geographic coordinates from latitude and longitude format to UTM format. The method gets the input coordinates from a user through a HTTP request and executes a program local to the application server that performs the transformation. The method passes the latitude and longitude coordinates as a command-line option to the external program and will perform some processing to retrieve the results of the transformation and return the resulting UTM coordinates.",
  "DemonstrativeExamples.4.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.4.Entries.1.Language": "Java",
  "DemonstrativeExamples.4.Entries.1.ExampleCode": "```\n\tpublic String coordinateTransformLatLonToUTM(String coordinates)\n\t{\n\t\t\tString utmCoords = null;\n\t\t\ttry {\n\t\t\t\t\tString latlonCoords = coordinates;\n\t\t\t\t\tRuntime rt = Runtime.getRuntime();\n\t\t\t\t\tProcess exec = rt.exec(\"cmd.exe /C latlon2utm.exe -\" + latlonCoords);\n```\n// process results of coordinate transform* \n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// ...* \n\t\t\t\t\t}\n\t\t\tcatch(Exception e) {...}\n\t\t\treturn utmCoords;}",
  "DemonstrativeExamples.4.Entries.2.BodyText": "However, the method does not verify that the contents of the coordinates input parameter includes only correctly-formatted latitude and longitude coordinates. If the input coordinates were not validated prior to the call to this method, a malicious user could execute another program local to the application server by appending '&' followed by the command for another program to the end of the coordinate string. The '&' instructs the Windows operating system to execute another program.",
  "DemonstrativeExamples.5.ID": "DX-28",
  "DemonstrativeExamples.5.Entries.0.IntroText": "The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.",
  "DemonstrativeExamples.5.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.5.Entries.1.Language": "Java",
  "DemonstrativeExamples.5.Entries.1.ExampleCode": "```\n\t...\n\tString btype = request.getParameter(\"backuptype\");\n\tString cmd = new String(\"cmd.exe /K \\\"\n\t\tc:\\\\util\\\\rmanDB.bat \"\n\t\t+btype+\n\t\t\"&&c:\\\\utl\\\\cleanup.bat\\\"\")\n\tSystem.Runtime.getRuntime().exec(cmd);\n\t...\n```",
  "DemonstrativeExamples.5.Entries.2.BodyText": "The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form \"& del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.",
  "DemonstrativeExamples.6.Entries.0.IntroText": "The following code is a wrapper around the UNIX command cat which prints the contents of a file to standard out. It is also injectable:",
  "DemonstrativeExamples.6.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.6.Entries.1.Language": "C",
  "DemonstrativeExamples.6.Entries.1.ExampleCode": "```\n\t#include <stdio.h>\n\t#include <unistd.h>\n\tint main(int argc, char **argv) {\n\t\t\tchar cat[] = \"cat \";\n\t\t\tchar *command;\n\t\t\tsize_t commandLength;\n\t\t\tcommandLength = strlen(cat) + strlen(argv[1]) + 1;\n\t\t\tcommand = (char *) malloc(commandLength);\n\t\t\tstrncpy(command, cat, commandLength);\n\t\t\tstrncat(command, argv[1], (commandLength - strlen(cat)) );\n\t\t\tsystem(command);\n\t\t\treturn (0);\n\t}\n```",
  "DemonstrativeExamples.6.Entries.2.BodyText": "Used normally, the output is simply the contents of the file requested, such as Story.txt:",
  "DemonstrativeExamples.6.Entries.3.Nature": "Informative",
  "DemonstrativeExamples.6.Entries.3.ExampleCode": "```\n\t./catWrapper Story.txt\n```",
  "DemonstrativeExamples.6.Entries.4.Nature": "Result",
  "DemonstrativeExamples.6.Entries.4.ExampleCode": "```\n\t When last we left our heroes... \n```",
  "DemonstrativeExamples.6.Entries.5.BodyText": "However, if the provided argument includes a semicolon and another command, such as:",
  "DemonstrativeExamples.6.Entries.6.Nature": "Attack",
  "DemonstrativeExamples.6.Entries.6.ExampleCode": "```\n\tStory.txt; ls\n```",
  "DemonstrativeExamples.6.Entries.7.BodyText": "Then the \"ls\" command is executed by catWrapper with no complaint:",
  "DemonstrativeExamples.6.Entries.8.Nature": "Result",
  "DemonstrativeExamples.6.Entries.8.ExampleCode": "```\n\t./catWrapper Story.txt; ls\n```",
  "DemonstrativeExamples.6.Entries.9.BodyText": "Two commands would then be executed: catWrapper, then ls. The result might look like:",
  "DemonstrativeExamples.6.Entries.10.Nature": "Result",
  "DemonstrativeExamples.6.Entries.10.ExampleCode": "```\n\tWhen last we left our heroes...\n\t Story.txt\n\t SensitiveFile.txt\n\t PrivateData.db\n\t a.out*\n```",
  "DemonstrativeExamples.6.Entries.11.BodyText": "If catWrapper had been set to have a higher privilege level than the standard user, arbitrary commands could be executed with that higher privilege.",
  "ObservedExamples.0.Reference": "CVE-2020-10987",
  "ObservedExamples.0.Description": "OS command injection in Wi-Fi router, as exploited in the wild per CISA KEV.",
  "ObservedExamples.0.Link": "https://www.cve.org/CVERecord?id=CVE-2020-10987",
  "ObservedExamples.1.Reference": "CVE-2020-10221",
  "ObservedExamples.1.Description": "Template functionality in network configuration management tool allows OS command injection, as exploited in the wild per CISA KEV.",
  "ObservedExamples.1.Link": "https://www.cve.org/CVERecord?id=CVE-2020-10221",
  "ObservedExamples.2.Reference": "CVE-2020-9054",
  "ObservedExamples.2.Description": "Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.",
  "ObservedExamples.2.Link": "https://www.cve.org/CVERecord?id=CVE-2020-9054",
  "ObservedExamples.3.Reference": "CVE-1999-0067",
  "ObservedExamples.3.Description": "Canonical example of OS command injection. CGI program does not neutralize \"|\" metacharacter when invoking a phonebook program.",
  "ObservedExamples.3.Link": "https://www.cve.org/CVERecord?id=CVE-1999-0067",
  "ObservedExamples.4.Reference": "CVE-2001-1246",
  "ObservedExamples.4.Description": "Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.",
  "ObservedExamples.4.Link": "https://www.cve.org/CVERecord?id=CVE-2001-1246",
  "ObservedExamples.5.Reference": "CVE-2002-0061",
  "ObservedExamples.5.Description": "Web server allows command execution using \"|\" (pipe) character.",
  "ObservedExamples.5.Link": "https://www.cve.org/CVERecord?id=CVE-2002-0061",
  "ObservedExamples.6.Reference": "CVE-2003-0041",
  "ObservedExamples.6.Description": "FTP client does not filter \"|\" from filenames returned by the server, allowing for OS command injection.",
  "ObservedExamples.6.Link": "https://www.cve.org/CVERecord?id=CVE-2003-0041",
  "ObservedExamples.7.Reference": "CVE-2008-2575",
  "ObservedExamples.7.Description": "Shell metacharacters in a filename in a ZIP archive",
  "ObservedExamples.7.Link": "https://www.cve.org/CVERecord?id=CVE-2008-2575",
  "ObservedExamples.8.Reference": "CVE-2002-1898",
  "ObservedExamples.8.Description": "Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link.",
  "ObservedExamples.8.Link": "https://www.cve.org/CVERecord?id=CVE-2002-1898",
  "ObservedExamples.9.Reference": "CVE-2008-4304",
  "ObservedExamples.9.Description": "OS command injection through environment variable.",
  "ObservedExamples.9.Link": "https://www.cve.org/CVERecord?id=CVE-2008-4304",
  "ObservedExamples.10.Reference": "CVE-2008-4796",
  "ObservedExamples.10.Description": "OS command injection through https:// URLs",
  "ObservedExamples.10.Link": "https://www.cve.org/CVERecord?id=CVE-2008-4796",
  "ObservedExamples.11.Reference": "CVE-2007-3572",
  "ObservedExamples.11.Description": "Chain: incomplete denylist for OS command injection",
  "ObservedExamples.11.Link": "https://www.cve.org/CVERecord?id=CVE-2007-3572",
  "ObservedExamples.12.Reference": "CVE-2012-1988",
  "ObservedExamples.12.Description": "Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.",
  "ObservedExamples.12.Link": "https://www.cve.org/CVERecord?id=CVE-2012-1988",
  "FunctionalAreas.0": "Program Invocation",
  "AffectedResources.0": "System Process",
  "TaxonomyMappings.0.TaxonomyName": "PLOVER",
  "TaxonomyMappings.0.EntryName": "OS Command Injection",
  "TaxonomyMappings.1.TaxonomyName": "OWASP Top Ten 2007",
  "TaxonomyMappings.1.EntryID": "A3",
  "TaxonomyMappings.1.EntryName": "Malicious File Execution",
  "TaxonomyMappings.1.MappingFit": "CWE More Specific",
  "TaxonomyMappings.2.TaxonomyName": "OWASP Top Ten 2004",
  "TaxonomyMappings.2.EntryID": "A6",
  "TaxonomyMappings.2.EntryName": "Injection Flaws",
  "TaxonomyMappings.2.MappingFit": "CWE More Specific",
  "TaxonomyMappings.3.TaxonomyName": "CERT C Secure Coding",
  "TaxonomyMappings.3.EntryID": "ENV03-C",
  "TaxonomyMappings.3.EntryName": "Sanitize the environment when invoking external programs",
  "TaxonomyMappings.4.TaxonomyName": "CERT C Secure Coding",
  "TaxonomyMappings.4.EntryID": "ENV33-C",
  "TaxonomyMappings.4.EntryName": "Do not call system()",
  "TaxonomyMappings.4.MappingFit": "CWE More Specific",
  "TaxonomyMappings.5.TaxonomyName": "CERT C Secure Coding",
  "TaxonomyMappings.5.EntryID": "STR02-C",
  "TaxonomyMappings.5.EntryName": "Sanitize data passed to complex subsystems",
  "TaxonomyMappings.6.TaxonomyName": "WASC",
  "TaxonomyMappings.6.EntryID": "31",
  "TaxonomyMappings.6.EntryName": "OS Commanding",
  "TaxonomyMappings.7.TaxonomyName": "The CERT Oracle Secure Coding Standard for Java (2011)",
  "TaxonomyMappings.7.EntryID": "IDS07-J",
  "TaxonomyMappings.7.EntryName": "Do not pass untrusted, unsanitized data to the Runtime.exec() method",
  "TaxonomyMappings.8.TaxonomyName": "Software Fault Patterns",
  "TaxonomyMappings.8.EntryID": "SFP24",
  "TaxonomyMappings.8.EntryName": "Tainted input to command",
  "TaxonomyMappings.9.TaxonomyName": "OMG ASCSM",
  "TaxonomyMappings.9.EntryID": "ASCSM-CWE-78",
  "RelatedAttackPatterns.0": "108",
  "RelatedAttackPatterns.1": "15",
  "RelatedAttackPatterns.2": "43",
  "RelatedAttackPatterns.3": "6",
  "RelatedAttackPatterns.4": "88",
  "References.0.ExternalReferenceID": "REF-140",
  "References.0.Authors.0": "Greg Hoglund",
  "References.0.Authors.1": "Gary McGraw",
  "References.0.Title": "Exploiting Software: How to Break Code",
  "References.0.PublicationYear": "2004",
  "References.0.PublicationMonth": "02",
  "References.0.PublicationDay": "27",
  "References.0.Publisher": "Addison-Wesley",
  "References.0.URL": "https://www.amazon.com/Exploiting-Software-How-Break-Code/dp/0201786958",
  "References.0.URLDate": "2023-04-07",
  "References.1.ExternalReferenceID": "REF-685",
  "References.1.Authors.0": "Pascal Meunier",
  "References.1.Title": "Meta-Character Vulnerabilities",
  "References.1.PublicationYear": "2008",
  "References.1.PublicationMonth": "02",
  "References.1.PublicationDay": "20",
  "References.1.URL": "https://web.archive.org/web/20100714032622/https://www.cs.purdue.edu/homes/cs390s/slides/week09.pdf",
  "References.1.URLDate": "2023-04-07",
  "References.2.ExternalReferenceID": "REF-686",
  "References.2.Authors.0": "Robert Auger",
  "References.2.Title": "OS Commanding",
  "References.2.PublicationYear": "2009",
  "References.2.PublicationMonth": "06",
  "References.2.URL": "http://projects.webappsec.org/w/page/13246950/OS%20Commanding",
  "References.2.URLDate": "2023-04-07",
  "References.3.ExternalReferenceID": "REF-687",
  "References.3.Section": "chapter: \"CGI Scripts\"",
  "References.3.Authors.0": "Lincoln Stein",
  "References.3.Authors.1": "John Stewart",
  "References.3.Title": "The World Wide Web Security FAQ",
  "References.3.PublicationYear": "2002",
  "References.3.PublicationMonth": "02",
  "References.3.PublicationDay": "04",
  "References.3.URL": "https://www.w3.org/Security/Faq/wwwsf4.html",
  "References.3.URLDate": "2023-04-07",
  "References.4.ExternalReferenceID": "REF-688",
  "References.4.Authors.0": "Jordan Dimov, Cigital",
  "References.4.Title": "Security Issues in Perl Scripts",
  "References.4.URL": "https://www.cgisecurity.com/lib/sips.html",
  "References.4.URLDate": "2023-04-07",
  "References.5.ExternalReferenceID": "REF-44",
  "References.5.Section": "\"Sin 10: Command Injection.\" Page 171",
  "References.5.Authors.0": "Michael Howard",
  "References.5.Authors.1": "David LeBlanc",
  "References.5.Authors.2": "John Viega",
  "References.5.Title": "24 Deadly Sins of Software Security",
  "References.5.Publication": "McGraw-Hill",
  "References.5.PublicationYear": "2010",
  "References.6.ExternalReferenceID": "REF-690",
  "References.6.Authors.0": "Frank Kim",
  "References.6.Title": "Top 25 Series - Rank 9 - OS Command Injection",
  "References.6.PublicationYear": "2010",
  "References.6.PublicationMonth": "02",
  "References.6.PublicationDay": "24",
  "References.6.Publisher": "SANS Software Security Institute",
  "References.6.URL": "https://www.sans.org/blog/top-25-series-rank-9-os-command-injection/",
  "References.6.URLDate": "2023-04-07",
  "References.7.ExternalReferenceID": "REF-45",
  "References.7.Authors.0": "OWASP",
  "References.7.Title": "OWASP Enterprise Security API (ESAPI) Project",
  "References.7.URL": "http://www.owasp.org/index.php/ESAPI",
  "References.8.ExternalReferenceID": "REF-76",
  "References.8.Authors.0": "Sean Barnum",
  "References.8.Authors.1": "Michael Gegick",
  "References.8.Title": "Least Privilege",
  "References.8.PublicationYear": "2005",
  "References.8.PublicationMonth": "09",
  "References.8.PublicationDay": "14",
  "References.8.URL": "https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege",
  "References.8.URLDate": "2023-04-07",
  "References.9.ExternalReferenceID": "REF-62",
  "References.9.Section": "Chapter 8, \"Shell Metacharacters\", Page 425",
  "References.9.Authors.0": "Mark Dowd",
  "References.9.Authors.1": "John McDonald",
  "References.9.Authors.2": "Justin Schuh",
  "References.9.Title": "The Art of Software Security Assessment",
  "References.9.Edition": "1st Edition",
  "References.9.PublicationYear": "2006",
  "References.9.Publisher": "Addison Wesley",
  "References.10.ExternalReferenceID": "REF-962",
  "References.10.Section": "ASCSM-CWE-78",
  "References.10.Authors.0": "Object Management Group (OMG)",
  "References.10.Title": "Automated Source Code Security Measure (ASCSM)",
  "References.10.PublicationYear": "2016",
  "References.10.PublicationMonth": "01",
  "References.10.URL": "http://www.omg.org/spec/ASCSM/1.0/",
  "References.11.ExternalReferenceID": "REF-1449",
  "References.11.Authors.0": "Cybersecurity and Infrastructure Security Agency",
  "References.11.Title": "Secure by Design Alert: Eliminating OS Command Injection Vulnerabilities",
  "References.11.PublicationYear": "2024",
  "References.11.PublicationMonth": "07",
  "References.11.PublicationDay": "10",
  "References.11.URL": "https://www.cisa.gov/resources-tools/resources/secure-design-alert-eliminating-os-command-injection-vulnerabilities",
  "References.11.URLDate": "2024-07-14",
  "MappingNotes.Usage": "Allowed",
  "MappingNotes.Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "MappingNotes.Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
  "MappingNotes.Reasons.0": "Acceptable-Use",
  "Notes.0.Type": "Terminology",
  "Notes.0.Note": "The \"OS command injection\" phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an \"-exec\" switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX \"find\" command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78.",
  "Notes.1.Type": "Research Gap",
  "Notes.1.Note": "More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection.",
  "ContentHistory.0.Type": "Submission",
  "ContentHistory.0.SubmissionName": "PLOVER",
  "ContentHistory.0.SubmissionDate": "2006-07-19",
  "ContentHistory.0.SubmissionVersion": "Draft 3",
  "ContentHistory.0.SubmissionReleaseDate": "2006-07-19",
  "ContentHistory.1.Type": "Modification",
  "ContentHistory.1.ModificationName": "Sean Eidemiller",
  "ContentHistory.1.ModificationOrganization": "Cigital",
  "ContentHistory.1.ModificationDate": "2008-07-01",
  "ContentHistory.1.ModificationComment": "added/updated demonstrative examples",
  "ContentHistory.2.Type": "Modification",
  "ContentHistory.2.ModificationName": "Eric Dalci",
  "ContentHistory.2.ModificationOrganization": "Cigital",
  "ContentHistory.2.ModificationDate": "2008-07-01",
  "ContentHistory.2.ModificationComment": "updated Time_of_Introduction",
  "ContentHistory.3.Type": "Modification",
  "ContentHistory.3.ModificationOrganization": "KDM Analytics",
  "ContentHistory.3.ModificationDate": "2008-08-01",
  "ContentHistory.3.ModificationComment": "added/updated white box definitions",
  "ContentHistory.4.Type": "Modification",
  "ContentHistory.4.ModificationOrganization": "Veracode",
  "ContentHistory.4.ModificationDate": "2008-08-15",
  "ContentHistory.4.ModificationComment": "Suggested OWASP Top Ten 2004 mapping",
  "ContentHistory.5.Type": "Modification",
  "ContentHistory.5.ModificationName": "CWE Content Team",
  "ContentHistory.5.ModificationOrganization": "MITRE",
  "ContentHistory.5.ModificationDate": "2008-09-08",
  "ContentHistory.5.ModificationComment": "updated Relationships, Other_Notes, Taxonomy_Mappings",
  "ContentHistory.6.Type": "Modification",
  "ContentHistory.6.ModificationName": "CWE Content Team",
  "ContentHistory.6.ModificationOrganization": "MITRE",
  "ContentHistory.6.ModificationDate": "2008-10-14",
  "ContentHistory.6.ModificationComment": "updated Description",
  "ContentHistory.7.Type": "Modification",
  "ContentHistory.7.ModificationName": "CWE Content Team",
  "ContentHistory.7.ModificationOrganization": "MITRE",
  "ContentHistory.7.ModificationDate": "2008-11-24",
  "ContentHistory.7.ModificationComment": "updated Observed_Examples, Relationships, Taxonomy_Mappings",
  "ContentHistory.8.Type": "Modification",
  "ContentHistory.8.ModificationName": "CWE Content Team",
  "ContentHistory.8.ModificationOrganization": "MITRE",
  "ContentHistory.8.ModificationDate": "2009-01-12",
  "ContentHistory.8.ModificationComment": "updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Research_Gaps, Terminology_Notes",
  "ContentHistory.9.Type": "Modification",
  "ContentHistory.9.ModificationName": "CWE Content Team",
  "ContentHistory.9.ModificationOrganization": "MITRE",
  "ContentHistory.9.ModificationDate": "2009-03-10",
  "ContentHistory.9.ModificationComment": "updated Potential_Mitigations",
  "ContentHistory.10.Type": "Modification",
  "ContentHistory.10.ModificationName": "CWE Content Team",
  "ContentHistory.10.ModificationOrganization": "MITRE",
  "ContentHistory.10.ModificationDate": "2009-05-27",
  "ContentHistory.10.ModificationComment": "updated Name, Related_Attack_Patterns",
  "ContentHistory.11.Type": "Modification",
  "ContentHistory.11.ModificationName": "KDM Analytics",
  "ContentHistory.11.ModificationDate": "2009-07-17",
  "ContentHistory.11.ModificationComment": "Improved the White_Box_Definition",
  "ContentHistory.12.Type": "Modification",
  "ContentHistory.12.ModificationName": "CWE Content Team",
  "ContentHistory.12.ModificationOrganization": "MITRE",
  "ContentHistory.12.ModificationDate": "2009-07-27",
  "ContentHistory.12.ModificationComment": "updated Description, Name, White_Box_Definitions",
  "ContentHistory.13.Type": "Modification",
  "ContentHistory.13.ModificationName": "CWE Content Team",
  "ContentHistory.13.ModificationOrganization": "MITRE",
  "ContentHistory.13.ModificationDate": "2009-10-29",
  "ContentHistory.13.ModificationComment": "updated Observed_Examples, References",
  "ContentHistory.14.Type": "Modification",
  "ContentHistory.14.ModificationName": "CWE Content Team",
  "ContentHistory.14.ModificationOrganization": "MITRE",
  "ContentHistory.14.ModificationDate": "2009-12-28",
  "ContentHistory.14.ModificationComment": "updated Detection_Factors",
  "ContentHistory.15.Type": "Modification",
  "ContentHistory.15.ModificationName": "CWE Content Team",
  "ContentHistory.15.ModificationOrganization": "MITRE",
  "ContentHistory.15.ModificationDate": "2010-02-16",
  "ContentHistory.15.ModificationComment": "updated Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings",
  "ContentHistory.16.Type": "Modification",
  "ContentHistory.16.ModificationName": "CWE Content Team",
  "ContentHistory.16.ModificationOrganization": "MITRE",
  "ContentHistory.16.ModificationDate": "2010-04-05",
  "ContentHistory.16.ModificationComment": "updated Potential_Mitigations",
  "ContentHistory.17.Type": "Modification",
  "ContentHistory.17.ModificationName": "CWE Content Team",
  "ContentHistory.17.ModificationOrganization": "MITRE",
  "ContentHistory.17.ModificationDate": "2010-06-21",
  "ContentHistory.17.ModificationComment": "updated Common_Consequences, Description, Detection_Factors, Name, Observed_Examples, Potential_Mitigations, References, Relationships",
  "ContentHistory.18.Type": "Modification",
  "ContentHistory.18.ModificationName": "CWE Content Team",
  "ContentHistory.18.ModificationOrganization": "MITRE",
  "ContentHistory.18.ModificationDate": "2010-09-27",
  "ContentHistory.18.ModificationComment": "updated Potential_Mitigations",
  "ContentHistory.19.Type": "Modification",
  "ContentHistory.19.ModificationName": "CWE Content Team",
  "ContentHistory.19.ModificationOrganization": "MITRE",
  "ContentHistory.19.ModificationDate": "2010-12-13",
  "ContentHistory.19.ModificationComment": "updated Description, Potential_Mitigations",
  "ContentHistory.20.Type": "Modification",
  "ContentHistory.20.ModificationName": "CWE Content Team",
  "ContentHistory.20.ModificationOrganization": "MITRE",
  "ContentHistory.20.ModificationDate": "2011-03-29",
  "ContentHistory.20.ModificationComment": "updated Demonstrative_Examples, Description",
  "ContentHistory.21.Type": "Modification",
  "ContentHistory.21.ModificationName": "CWE Content Team",
  "ContentHistory.21.ModificationOrganization": "MITRE",
  "ContentHistory.21.ModificationDate": "2011-06-01",
  "ContentHistory.21.ModificationComment": "updated Common_Consequences, Relationships, Taxonomy_Mappings",
  "ContentHistory.22.Type": "Modification",
  "ContentHistory.22.ModificationName": "CWE Content Team",
  "ContentHistory.22.ModificationOrganization": "MITRE",
  "ContentHistory.22.ModificationDate": "2011-06-27",
  "ContentHistory.22.ModificationComment": "updated Relationships",
  "ContentHistory.23.Type": "Modification",
  "ContentHistory.23.ModificationName": "CWE Content Team",
  "ContentHistory.23.ModificationOrganization": "MITRE",
  "ContentHistory.23.ModificationDate": "2011-09-13",
  "ContentHistory.23.ModificationComment": "updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings",
  "ContentHistory.24.Type": "Modification",
  "ContentHistory.24.ModificationName": "CWE Content Team",
  "ContentHistory.24.ModificationOrganization": "MITRE",
  "ContentHistory.24.ModificationDate": "2012-05-11",
  "ContentHistory.24.ModificationComment": "updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings",
  "ContentHistory.25.Type": "Modification",
  "ContentHistory.25.ModificationName": "CWE Content Team",
  "ContentHistory.25.ModificationOrganization": "MITRE",
  "ContentHistory.25.ModificationDate": "2012-10-30",
  "ContentHistory.25.ModificationComment": "updated Observed_Examples, Potential_Mitigations",
  "ContentHistory.26.Type": "Modification",
  "ContentHistory.26.ModificationName": "CWE Content Team",
  "ContentHistory.26.ModificationOrganization": "MITRE",
  "ContentHistory.26.ModificationDate": "2014-02-18",
  "ContentHistory.26.ModificationComment": "updated Applicable_Platforms, Demonstrative_Examples, Terminology_Notes",
  "ContentHistory.27.Type": "Modification",
  "ContentHistory.27.ModificationName": "CWE Content Team",
  "ContentHistory.27.ModificationOrganization": "MITRE",
  "ContentHistory.27.ModificationDate": "2014-06-23",
  "ContentHistory.27.ModificationComment": "updated Relationships",
  "ContentHistory.28.Type": "Modification",
  "ContentHistory.28.ModificationName": "CWE Content Team",
  "ContentHistory.28.ModificationOrganization": "MITRE",
  "ContentHistory.28.ModificationDate": "2014-07-30",
  "ContentHistory.28.ModificationComment": "updated Detection_Factors, Relationships, Taxonomy_Mappings",
  "ContentHistory.29.Type": "Modification",
  "ContentHistory.29.ModificationName": "CWE Content Team",
  "ContentHistory.29.ModificationOrganization": "MITRE",
  "ContentHistory.29.ModificationDate": "2015-12-07",
  "ContentHistory.29.ModificationComment": "updated Relationships",
  "ContentHistory.30.Type": "Modification",
  "ContentHistory.30.ModificationName": "CWE Content Team",
  "ContentHistory.30.ModificationOrganization": "MITRE",
  "ContentHistory.30.ModificationDate": "2017-11-08",
  "ContentHistory.30.ModificationComment": "updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings, White_Box_Definitions",
  "ContentHistory.31.Type": "Modification",
  "ContentHistory.31.ModificationName": "CWE Content Team",
  "ContentHistory.31.ModificationOrganization": "MITRE",
  "ContentHistory.31.ModificationDate": "2018-03-27",
  "ContentHistory.31.ModificationComment": "updated Relationships",
  "ContentHistory.32.Type": "Modification",
  "ContentHistory.32.ModificationName": "CWE Content Team",
  "ContentHistory.32.ModificationOrganization": "MITRE",
  "ContentHistory.32.ModificationDate": "2019-01-03",
  "ContentHistory.32.ModificationComment": "updated References, Relationships, Taxonomy_Mappings",
  "ContentHistory.33.Type": "Modification",
  "ContentHistory.33.ModificationName": "CWE Content Team",
  "ContentHistory.33.ModificationOrganization": "MITRE",
  "ContentHistory.33.ModificationDate": "2019-06-20",
  "ContentHistory.33.ModificationComment": "updated Relationships",
  "ContentHistory.34.Type": "Modification",
  "ContentHistory.34.ModificationName": "CWE Content Team",
  "ContentHistory.34.ModificationOrganization": "MITRE",
  "ContentHistory.34.ModificationDate": "2019-09-19",
  "ContentHistory.34.ModificationComment": "updated Relationships",
  "ContentHistory.35.Type": "Modification",
  "ContentHistory.35.ModificationName": "CWE Content Team",
  "ContentHistory.35.ModificationOrganization": "MITRE",
  "ContentHistory.35.ModificationDate": "2020-02-24",
  "ContentHistory.35.ModificationComment": "updated Potential_Mitigations, Relationships",
  "ContentHistory.36.Type": "Modification",
  "ContentHistory.36.ModificationName": "CWE Content Team",
  "ContentHistory.36.ModificationOrganization": "MITRE",
  "ContentHistory.36.ModificationDate": "2020-06-25",
  "ContentHistory.36.ModificationComment": "updated Observed_Examples, Potential_Mitigations",
  "ContentHistory.37.Type": "Modification",
  "ContentHistory.37.ModificationName": "CWE Content Team",
  "ContentHistory.37.ModificationOrganization": "MITRE",
  "ContentHistory.37.ModificationDate": "2020-08-20",
  "ContentHistory.37.ModificationComment": "updated Relationships",
  "ContentHistory.38.Type": "Modification",
  "ContentHistory.38.ModificationName": "CWE Content Team",
  "ContentHistory.38.ModificationOrganization": "MITRE",
  "ContentHistory.38.ModificationDate": "2020-12-10",
  "ContentHistory.38.ModificationComment": "updated Potential_Mitigations, Relationships",
  "ContentHistory.39.Type": "Modification",
  "ContentHistory.39.ModificationName": "CWE Content Team",
  "ContentHistory.39.ModificationOrganization": "MITRE",
  "ContentHistory.39.ModificationDate": "2021-07-20",
  "ContentHistory.39.ModificationComment": "updated Observed_Examples, Relationships",
  "ContentHistory.40.Type": "Modification",
  "ContentHistory.40.ModificationName": "CWE Content Team",
  "ContentHistory.40.ModificationOrganization": "MITRE",
  "ContentHistory.40.ModificationDate": "2021-10-28",
  "ContentHistory.40.ModificationComment": "updated Relationships",
  "ContentHistory.41.Type": "Modification",
  "ContentHistory.41.ModificationName": "CWE Content Team",
  "ContentHistory.41.ModificationOrganization": "MITRE",
  "ContentHistory.41.ModificationDate": "2022-04-28",
  "ContentHistory.41.ModificationComment": "updated Demonstrative_Examples",
  "ContentHistory.42.Type": "Modification",
  "ContentHistory.42.ModificationName": "CWE Content Team",
  "ContentHistory.42.ModificationOrganization": "MITRE",
  "ContentHistory.42.ModificationDate": "2022-06-28",
  "ContentHistory.42.ModificationComment": "updated Observed_Examples, Relationships",
  "ContentHistory.43.Type": "Modification",
  "ContentHistory.43.ModificationName": "CWE Content Team",
  "ContentHistory.43.ModificationOrganization": "MITRE",
  "ContentHistory.43.ModificationDate": "2022-10-13",
  "ContentHistory.43.ModificationComment": "updated References",
  "ContentHistory.44.Type": "Modification",
  "ContentHistory.44.ModificationName": "CWE Content Team",
  "ContentHistory.44.ModificationOrganization": "MITRE",
  "ContentHistory.44.ModificationDate": "2023-01-31",
  "ContentHistory.44.ModificationComment": "updated Common_Consequences, Description",
  "ContentHistory.45.Type": "Modification",
  "ContentHistory.45.ModificationName": "CWE Content Team",
  "ContentHistory.45.ModificationOrganization": "MITRE",
  "ContentHistory.45.ModificationDate": "2023-04-27",
  "ContentHistory.45.ModificationComment": "updated Detection_Factors, References, Relationships, Time_of_Introduction",
  "ContentHistory.46.Type": "Modification",
  "ContentHistory.46.ModificationName": "CWE Content Team",
  "ContentHistory.46.ModificationOrganization": "MITRE",
  "ContentHistory.46.ModificationDate": "2023-06-29",
  "ContentHistory.46.ModificationComment": "updated Mapping_Notes, Relationships",
  "ContentHistory.47.Type": "Modification",
  "ContentHistory.47.ModificationName": "CWE Content Team",
  "ContentHistory.47.ModificationOrganization": "MITRE",
  "ContentHistory.47.ModificationDate": "2024-07-16",
  "ContentHistory.47.ModificationComment": "updated Alternate_Terms, Common_Consequences, Demonstrative_Examples, Description, Diagram, References",
  "ContentHistory.47.ModificationVersion": "4.15",
  "ContentHistory.47.ModificationReleaseDate": "2024-07-16",
  "ContentHistory.48.Type": "Modification",
  "ContentHistory.48.ModificationName": "CWE Content Team",
  "ContentHistory.48.ModificationOrganization": "MITRE",
  "ContentHistory.48.ModificationDate": "2024-11-19",
  "ContentHistory.48.ModificationComment": "updated Relationships",
  "ContentHistory.48.ModificationVersion": "4.16",
  "ContentHistory.48.ModificationReleaseDate": "2024-11-19",
  "ContentHistory.49.Type": "Contribution",
  "ContentHistory.49.ContributionName": "Abhi Balakrishnan",
  "ContentHistory.49.ContributionDate": "2024-02-29",
  "ContentHistory.49.ContributionComment": "Provided diagram to improve CWE usability",
  "ContentHistory.49.ContributionType": "Content",
  "ContentHistory.49.ContributionVersion": "4.15",
  "ContentHistory.49.ContributionReleaseDate": "2024-07-16",
  "ContentHistory.50.Type": "Rename",
  "ContentHistory.50.PreviousEntryName": "OS Command Injection",
  "ContentHistory.50.Date": "2008-04-11",
  "ContentHistory.51.Type": "Rename",
  "ContentHistory.51.PreviousEntryName": "Failure to Sanitize Data into an OS Command (aka 'OS Command Injection')",
  "ContentHistory.51.Date": "2009-01-12",
  "ContentHistory.52.Type": "Rename",
  "ContentHistory.52.PreviousEntryName": "Failure to Preserve OS Command Structure (aka 'OS Command Injection')",
  "ContentHistory.52.Date": "2009-05-27",
  "ContentHistory.53.Type": "Rename",
  "ContentHistory.53.PreviousEntryName": "Failure to Preserve OS Command Structure ('OS Command Injection')",
  "ContentHistory.53.Date": "2009-07-27",
  "ContentHistory.54.Type": "Rename",
  "ContentHistory.54.PreviousEntryName": "Improper Sanitization of Special Elements used in an OS Command ('OS Command Injection')",
  "ContentHistory.54.Date": "2010-06-21"
}