{
  "ID": "119",
  "Name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
  "Abstraction": "Class",
  "Structure": "Simple",
  "Status": "Stable",
  "Diagram": "/data/images/CWE-119-Diagram.png",
  "Description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
  "LikelihoodOfExploit": "High",
  "RelatedWeaknesses.0.Nature": "ChildOf",
  "RelatedWeaknesses.0.CweID": "118",
  "RelatedWeaknesses.0.ViewID": "1000",
  "RelatedWeaknesses.0.Ordinal": "Primary",
  "RelatedWeaknesses.1.Nature": "ChildOf",
  "RelatedWeaknesses.1.CweID": "20",
  "RelatedWeaknesses.1.ViewID": "700",
  "RelatedWeaknesses.1.Ordinal": "Primary",
  "ApplicablePlatforms.0.Type": "Language",
  "ApplicablePlatforms.0.Name": "C",
  "ApplicablePlatforms.0.Prevalence": "Often",
  "ApplicablePlatforms.1.Type": "Language",
  "ApplicablePlatforms.1.Name": "C++",
  "ApplicablePlatforms.1.Prevalence": "Often",
  "ApplicablePlatforms.2.Type": "Language",
  "ApplicablePlatforms.2.Class": "Assembly",
  "ApplicablePlatforms.2.Prevalence": "Undetermined",
  "BackgroundDetails.0": "Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced.",
  "AlternateTerms.0.Term": "Buffer Overflow",
  "AlternateTerms.0.Description": "This term has many different meanings to different audiences. From a CWE mapping perspective, this term should be avoided where possible. Some researchers, developers, and tools intend for it to mean \"write past the end of a buffer,\" whereas others use the same term to mean \"any read or write outside the boundaries of a buffer, whether before the beginning of the buffer or after the end of the buffer.\" Others could mean \"any action after the end of a buffer, whether it is a read or write.\" Since the term is commonly used for exploitation and for vulnerabilities, it further confuses things.",
  "AlternateTerms.1.Term": "buffer overrun",
  "AlternateTerms.1.Description": "Some prominent vendors and researchers use the term \"buffer overrun,\" but most people use \"buffer overflow.\" See the alternate term for \"buffer overflow\" for context.",
  "AlternateTerms.2.Term": "memory safety",
  "AlternateTerms.2.Description": "Generally used for techniques that avoid weaknesses related to memory access, such as those identified by CWE-119 and its descendants. However, the term is not formal, and there is likely disagreement between practitioners as to which weaknesses are implicitly covered by the \"memory safety\" term.",
  "ModesOfIntroduction.0.Phase": "Implementation",
  "CommonConsequences.0.Scope.0": "Integrity",
  "CommonConsequences.0.Scope.1": "Confidentiality",
  "CommonConsequences.0.Scope.2": "Availability",
  "CommonConsequences.0.Impact.0": "Execute Unauthorized Code or Commands",
  "CommonConsequences.0.Impact.1": "Modify Memory",
  "CommonConsequences.0.Note": "If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can alter the intended control flow by redirecting a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.",
  "CommonConsequences.1.Scope.0": "Availability",
  "CommonConsequences.1.Scope.1": "Confidentiality",
  "CommonConsequences.1.Impact.0": "Read Memory",
  "CommonConsequences.1.Impact.1": "DoS: Crash, Exit, or Restart",
  "CommonConsequences.1.Impact.2": "DoS: Resource Consumption (CPU)",
  "CommonConsequences.1.Impact.3": "DoS: Resource Consumption (Memory)",
  "CommonConsequences.1.Note": "Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",
  "CommonConsequences.2.Scope.0": "Confidentiality",
  "CommonConsequences.2.Impact.0": "Read Memory",
  "CommonConsequences.2.Note": "In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffer's position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.",
  "DetectionMethods.0.DetectionMethodID": "DM-1",
  "DetectionMethods.0.Method": "Automated Static Analysis",
  "DetectionMethods.0.Description": "\n\nThis weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.\n\n\nAutomated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\n",
  "DetectionMethods.0.Effectiveness": "High",
  "DetectionMethods.0.EffectivenessNotes": "Detection techniques for buffer-related errors are more mature than for most other weakness types.",
  "DetectionMethods.1.DetectionMethodID": "DM-2",
  "DetectionMethods.1.Method": "Automated Dynamic Analysis",
  "DetectionMethods.1.Description": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
  "DetectionMethods.2.Method": "Automated Static Analysis - Binary or Bytecode",
  "DetectionMethods.2.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode Quality Analysis\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis",
  "DetectionMethods.2.Effectiveness": "SOAR Partial",
  "DetectionMethods.3.Method": "Manual Static Analysis - Binary or Bytecode",
  "DetectionMethods.3.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
  "DetectionMethods.3.Effectiveness": "SOAR Partial",
  "DetectionMethods.4.Method": "Dynamic Analysis with Automated Results Interpretation",
  "DetectionMethods.4.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners",
  "DetectionMethods.4.Effectiveness": "SOAR Partial",
  "DetectionMethods.5.Method": "Dynamic Analysis with Manual Results Interpretation",
  "DetectionMethods.5.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer",
  "DetectionMethods.5.Effectiveness": "SOAR Partial",
  "DetectionMethods.6.Method": "Manual Static Analysis - Source Code",
  "DetectionMethods.6.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)",
  "DetectionMethods.6.Effectiveness": "SOAR Partial",
  "DetectionMethods.7.Method": "Automated Static Analysis - Source Code",
  "DetectionMethods.7.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tSource Code Quality Analyzer",
  "DetectionMethods.7.Effectiveness": "High",
  "DetectionMethods.8.Method": "Architecture or Design Review",
  "DetectionMethods.8.Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
  "DetectionMethods.8.Effectiveness": "High",
  "PotentialMitigations.0.MitigationID": "MIT-3",
  "PotentialMitigations.0.Phase.0": "Requirements",
  "PotentialMitigations.0.Strategy": "Language Selection",
  "PotentialMitigations.0.Description": "\n\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.\n\n\nBe wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\n",
  "PotentialMitigations.1.MitigationID": "MIT-4.1",
  "PotentialMitigations.1.Phase.0": "Architecture and Design",
  "PotentialMitigations.1.Strategy": "Libraries or Frameworks",
  "PotentialMitigations.1.Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nExamples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.\n",
  "PotentialMitigations.1.EffectivenessNotes": "This is not a complete solution, since many buffer overflows are not related to strings.",
  "PotentialMitigations.2.MitigationID": "MIT-10",
  "PotentialMitigations.2.Phase.0": "Operation",
  "PotentialMitigations.2.Phase.1": "Build and Compilation",
  "PotentialMitigations.2.Strategy": "Environment Hardening",
  "PotentialMitigations.2.Description": "\n\nUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. \n\n\n D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. \n",
  "PotentialMitigations.2.Effectiveness": "Defense in Depth",
  "PotentialMitigations.2.EffectivenessNotes": "\n\n This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application. \n",
  "PotentialMitigations.3.MitigationID": "MIT-9",
  "PotentialMitigations.3.Phase.0": "Implementation",
  "PotentialMitigations.3.Description": "\n\nConsider adhering to the following rules when allocating and managing an application's memory:\n\n\n  - Double check that the buffer is as large as specified.\n\n  - When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.\n\n  - Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.\n\n  - If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.\n\n",
  "PotentialMitigations.4.MitigationID": "MIT-11",
  "PotentialMitigations.4.Phase.0": "Operation",
  "PotentialMitigations.4.Phase.1": "Build and Compilation",
  "PotentialMitigations.4.Strategy": "Environment Hardening",
  "PotentialMitigations.4.Description": "\n\nRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. \n\n\n Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. \n\n\n For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. \n",
  "PotentialMitigations.4.Effectiveness": "Defense in Depth",
  "PotentialMitigations.4.EffectivenessNotes": "These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]",
  "PotentialMitigations.5.MitigationID": "MIT-12",
  "PotentialMitigations.5.Phase.0": "Operation",
  "PotentialMitigations.5.Strategy": "Environment Hardening",
  "PotentialMitigations.5.Description": "\n\n Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. \n\n\n For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]. \n",
  "PotentialMitigations.5.Effectiveness": "Defense in Depth",
  "PotentialMitigations.5.EffectivenessNotes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
  "PotentialMitigations.6.MitigationID": "MIT-13",
  "PotentialMitigations.6.Phase.0": "Implementation",
  "PotentialMitigations.6.Description": "Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.",
  "PotentialMitigations.6.Effectiveness": "Moderate",
  "PotentialMitigations.6.EffectivenessNotes": "This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).",
  "DemonstrativeExamples.0.ID": "DX-1",
  "DemonstrativeExamples.0.Entries.0.IntroText": "This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.",
  "DemonstrativeExamples.0.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.0.Entries.1.Language": "C",
  "DemonstrativeExamples.0.Entries.1.ExampleCode": "```\n\tvoid host_lookup(char *user_supplied_addr){\n\t\t\tstruct hostent *hp;\n\t\t\tin_addr_t *addr;\n\t\t\tchar hostname[64];\n\t\t\tin_addr_t inet_addr(const char *cp);\n```\n/*routine that ensures user_supplied_addr is in the right format for conversion */* \n\t\t\t\n\t\t\tvalidate_addr_form(user_supplied_addr);\n\t\t\taddr = inet_addr(user_supplied_addr);\n\t\t\thp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);\n\t\t\tstrcpy(hostname, hp->h_name);}",
  "DemonstrativeExamples.0.Entries.2.BodyText": "This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.",
  "DemonstrativeExamples.0.Entries.3.BodyText": "Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).",
  "DemonstrativeExamples.1.ID": "DX-19",
  "DemonstrativeExamples.1.Entries.0.IntroText": "This example applies an encoding procedure to an input string and stores it into a buffer.",
  "DemonstrativeExamples.1.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.1.Entries.1.Language": "C",
  "DemonstrativeExamples.1.Entries.1.ExampleCode": "```\n\tchar * copy_input(char *user_supplied_string){\n\t\t\tint i, dst_index;\n\t\t\tchar *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);\n\t\t\tif ( MAX_SIZE <= strlen(user_supplied_string) ){\n\t\t\t\tdie(\"user string too long, die evil hacker!\");\n\t\t\t}\n\t\t\tdst_index = 0;\n\t\t\tfor ( i = 0; i < strlen(user_supplied_string); i++ ){\n\t\t\t\t\tif( '&' == user_supplied_string[i] ){\n\t\t\t\t\t\tdst_buf[dst_index++] = '&';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'a';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'm';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'p';\n\t\t\t\t\t\tdst_buf[dst_index++] = ';';\n\t\t\t\t\t}\n\t\t\t\t\telse if ('<' == user_supplied_string[i] ){\n```\n/* encode to &lt; */* \n\t\t\t\t\t\t}\n\t\t\t\t\telse dst_buf[dst_index++] = user_supplied_string[i];}\n\t\t\treturn dst_buf;}",
  "DemonstrativeExamples.1.Entries.2.BodyText": "The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.",
  "DemonstrativeExamples.2.ID": "DX-90",
  "DemonstrativeExamples.2.Entries.0.IntroText": "The following example asks a user for an offset into an array to select an item.",
  "DemonstrativeExamples.2.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.2.Entries.1.Language": "C",
  "DemonstrativeExamples.2.Entries.1.ExampleCode": "```\n\tint main (int argc, char **argv) {\n\t\tchar *items[] = {\"boat\", \"car\", \"truck\", \"train\"};\n\t\tint index = GetUntrustedOffset();\n\t\tprintf(\"You selected %s\\n\", items[index-1]);\n\t}\n```",
  "DemonstrativeExamples.2.Entries.2.BodyText": "The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126).",
  "DemonstrativeExamples.3.ID": "DX-100",
  "DemonstrativeExamples.3.Entries.0.IntroText": "In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method",
  "DemonstrativeExamples.3.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.3.Entries.1.Language": "C",
  "DemonstrativeExamples.3.Entries.1.ExampleCode": "```\n\tint getValueFromArray(int *array, int len, int index) {\n\t\t\tint value;\n```\n// check that the array index is less than the maximum* \n\t\t\t\n\t\t\t\n\t\t\t *// length of the array* \n\t\t\tif (index < len) {\n\t\t\t```\n```\n// get the value at the specified index of the array* \n\t\t\t\t\tvalue = array[index];}\n\t\t\t\n\t\t\t *// if array index is invalid then output error message* \n\t\t\t\n\t\t\t *// and return value indicating error* \n\t\t\telse {\n\t\t\t```\n\t\t\t\tprintf(\"Value is: %d\\n\", array[index]);\n\t\t\t\tvalue = -1;\n\t\t\t}\n\t\t\treturn value;\n\t}\n```",
  "DemonstrativeExamples.3.Entries.2.BodyText": "However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below.",
  "DemonstrativeExamples.3.Entries.3.Nature": "Good",
  "DemonstrativeExamples.3.Entries.3.Language": "C",
  "DemonstrativeExamples.3.Entries.3.ExampleCode": "```\n\t...\n```\n// check that the array index is within the correct* \n\t\n\t\n\t *// range of values for the array* \n\tif (index >= 0 && index < len) {\n\t\n\t...",
  "DemonstrativeExamples.4.Entries.0.IntroText": "Windows provides the _mbs family of functions to perform various operations on multibyte strings. When these functions are passed a malformed multibyte string, such as a string containing a valid leading byte followed by a single null byte, they can read or write past the end of the string buffer causing a buffer overflow. The following functions all pose a risk of buffer overflow: _mbsinc _mbsdec _mbsncat _mbsncpy _mbsnextc _mbsnset _mbsrev _mbsset _mbsstr _mbstok _mbccpy _mbslen",
  "ObservedExamples.0.Reference": "CVE-2021-22991",
  "ObservedExamples.0.Description": "Incorrect URI normalization in application traffic product leads to buffer overflow, as exploited in the wild per CISA KEV.",
  "ObservedExamples.0.Link": "https://www.cve.org/CVERecord?id=CVE-2021-22991",
  "ObservedExamples.1.Reference": "CVE-2020-29557",
  "ObservedExamples.1.Description": "Buffer overflow in Wi-Fi router web interface, as exploited in the wild per CISA KEV.",
  "ObservedExamples.1.Link": "https://www.cve.org/CVERecord?id=CVE-2020-29557",
  "ObservedExamples.2.Reference": "CVE-2009-2550",
  "ObservedExamples.2.Description": "Classic stack-based buffer overflow in media player using a long entry in a playlist",
  "ObservedExamples.2.Link": "https://www.cve.org/CVERecord?id=CVE-2009-2550",
  "ObservedExamples.3.Reference": "CVE-2009-2403",
  "ObservedExamples.3.Description": "Heap-based buffer overflow in media player using a long entry in a playlist",
  "ObservedExamples.3.Link": "https://www.cve.org/CVERecord?id=CVE-2009-2403",
  "ObservedExamples.4.Reference": "CVE-2009-0689",
  "ObservedExamples.4.Description": "large precision value in a format string triggers overflow",
  "ObservedExamples.4.Link": "https://www.cve.org/CVERecord?id=CVE-2009-0689",
  "ObservedExamples.5.Reference": "CVE-2009-0690",
  "ObservedExamples.5.Description": "negative offset value leads to out-of-bounds read",
  "ObservedExamples.5.Link": "https://www.cve.org/CVERecord?id=CVE-2009-0690",
  "ObservedExamples.6.Reference": "CVE-2009-1532",
  "ObservedExamples.6.Description": "malformed inputs cause accesses of uninitialized or previously-deleted objects, leading to memory corruption",
  "ObservedExamples.6.Link": "https://www.cve.org/CVERecord?id=CVE-2009-1532",
  "ObservedExamples.7.Reference": "CVE-2009-1528",
  "ObservedExamples.7.Description": "chain: lack of synchronization leads to memory corruption",
  "ObservedExamples.7.Link": "https://www.cve.org/CVERecord?id=CVE-2009-1528",
  "ObservedExamples.8.Reference": "CVE-2021-29529",
  "ObservedExamples.8.Description": "Chain: machine-learning product can have a heap-based buffer overflow (CWE-122) when some integer-oriented bounds are calculated by using ceiling() and floor() on floating point values (CWE-1339)",
  "ObservedExamples.8.Link": "https://www.cve.org/CVERecord?id=CVE-2021-29529",
  "ObservedExamples.9.Reference": "CVE-2009-0558",
  "ObservedExamples.9.Description": "attacker-controlled array index leads to code execution",
  "ObservedExamples.9.Link": "https://www.cve.org/CVERecord?id=CVE-2009-0558",
  "ObservedExamples.10.Reference": "CVE-2009-0269",
  "ObservedExamples.10.Description": "chain: -1 value from a function call was intended to indicate an error, but is used as an array index instead.",
  "ObservedExamples.10.Link": "https://www.cve.org/CVERecord?id=CVE-2009-0269",
  "ObservedExamples.11.Reference": "CVE-2009-0566",
  "ObservedExamples.11.Description": "chain: incorrect calculations lead to incorrect pointer dereference and memory corruption",
  "ObservedExamples.11.Link": "https://www.cve.org/CVERecord?id=CVE-2009-0566",
  "ObservedExamples.12.Reference": "CVE-2009-1350",
  "ObservedExamples.12.Description": "product accepts crafted messages that lead to a dereference of an arbitrary pointer",
  "ObservedExamples.12.Link": "https://www.cve.org/CVERecord?id=CVE-2009-1350",
  "ObservedExamples.13.Reference": "CVE-2009-0191",
  "ObservedExamples.13.Description": "chain: malformed input causes dereference of uninitialized memory",
  "ObservedExamples.13.Link": "https://www.cve.org/CVERecord?id=CVE-2009-0191",
  "ObservedExamples.14.Reference": "CVE-2008-4113",
  "ObservedExamples.14.Description": "OS kernel trusts userland-supplied length value, allowing reading of sensitive information",
  "ObservedExamples.14.Link": "https://www.cve.org/CVERecord?id=CVE-2008-4113",
  "ObservedExamples.15.Reference": "CVE-2005-1513",
  "ObservedExamples.15.Description": "Chain: integer overflow in securely-coded mail program leads to buffer overflow. In 2005, this was regarded as unrealistic to exploit, but in 2020, it was rediscovered to be easier to exploit due to evolutions of the technology.",
  "ObservedExamples.15.Link": "https://www.cve.org/CVERecord?id=CVE-2005-1513",
  "ObservedExamples.16.Reference": "CVE-2003-0542",
  "ObservedExamples.16.Description": "buffer overflow involving a regular expression with a large number of captures",
  "ObservedExamples.16.Link": "https://www.cve.org/CVERecord?id=CVE-2003-0542",
  "ObservedExamples.17.Reference": "CVE-2017-1000121",
  "ObservedExamples.17.Description": "chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).",
  "ObservedExamples.17.Link": "https://www.cve.org/CVERecord?id=CVE-2017-1000121",
  "AffectedResources.0": "Memory",
  "TaxonomyMappings.0.TaxonomyName": "OWASP Top Ten 2004",
  "TaxonomyMappings.0.EntryID": "A5",
  "TaxonomyMappings.0.EntryName": "Buffer Overflows",
  "TaxonomyMappings.0.MappingFit": "Exact",
  "TaxonomyMappings.1.TaxonomyName": "CERT C Secure Coding",
  "TaxonomyMappings.1.EntryID": "ARR00-C",
  "TaxonomyMappings.1.EntryName": "Understand how arrays work",
  "TaxonomyMappings.2.TaxonomyName": "CERT C Secure Coding",
  "TaxonomyMappings.2.EntryID": "ARR30-C",
  "TaxonomyMappings.2.EntryName": "Do not form or use out-of-bounds pointers or array subscripts",
  "TaxonomyMappings.2.MappingFit": "CWE More Abstract",
  "TaxonomyMappings.3.TaxonomyName": "CERT C Secure Coding",
  "TaxonomyMappings.3.EntryID": "ARR38-C",
  "TaxonomyMappings.3.EntryName": "Guarantee that library functions do not form invalid pointers",
  "TaxonomyMappings.3.MappingFit": "CWE More Abstract",
  "TaxonomyMappings.4.TaxonomyName": "CERT C Secure Coding",
  "TaxonomyMappings.4.EntryID": "ENV01-C",
  "TaxonomyMappings.4.EntryName": "Do not make assumptions about the size of an environment variable",
  "TaxonomyMappings.5.TaxonomyName": "CERT C Secure Coding",
  "TaxonomyMappings.5.EntryID": "EXP39-C",
  "TaxonomyMappings.5.EntryName": "Do not access a variable through a pointer of an incompatible type",
  "TaxonomyMappings.5.MappingFit": "Imprecise",
  "TaxonomyMappings.6.TaxonomyName": "CERT C Secure Coding",
  "TaxonomyMappings.6.EntryID": "FIO37-C",
  "TaxonomyMappings.6.EntryName": "Do not assume character data has been read",
  "TaxonomyMappings.7.TaxonomyName": "CERT C Secure Coding",
  "TaxonomyMappings.7.EntryID": "STR31-C",
  "TaxonomyMappings.7.EntryName": "Guarantee that storage for strings has sufficient space for character data and the null terminator",
  "TaxonomyMappings.7.MappingFit": "CWE More Abstract",
  "TaxonomyMappings.8.TaxonomyName": "CERT C Secure Coding",
  "TaxonomyMappings.8.EntryID": "STR32-C",
  "TaxonomyMappings.8.EntryName": "Do not pass a non-null-terminated character sequence to a library function that expects a string",
  "TaxonomyMappings.8.MappingFit": "CWE More Abstract",
  "TaxonomyMappings.9.TaxonomyName": "WASC",
  "TaxonomyMappings.9.EntryID": "7",
  "TaxonomyMappings.9.EntryName": "Buffer Overflow",
  "TaxonomyMappings.10.TaxonomyName": "Software Fault Patterns",
  "TaxonomyMappings.10.EntryID": "SFP8",
  "TaxonomyMappings.10.EntryName": "Faulty Buffer Access",
  "RelatedAttackPatterns.0": "10",
  "RelatedAttackPatterns.1": "100",
  "RelatedAttackPatterns.2": "123",
  "RelatedAttackPatterns.3": "14",
  "RelatedAttackPatterns.4": "24",
  "RelatedAttackPatterns.5": "42",
  "RelatedAttackPatterns.6": "44",
  "RelatedAttackPatterns.7": "45",
  "RelatedAttackPatterns.8": "46",
  "RelatedAttackPatterns.9": "47",
  "RelatedAttackPatterns.10": "8",
  "RelatedAttackPatterns.11": "9",
  "References.0.ExternalReferenceID": "REF-1029",
  "References.0.Authors.0": "Aleph One",
  "References.0.Title": "Smashing The Stack For Fun And Profit",
  "References.0.PublicationYear": "1996",
  "References.0.PublicationMonth": "11",
  "References.0.PublicationDay": "08",
  "References.0.URL": "http://phrack.org/issues/49/14.html",
  "References.1.ExternalReferenceID": "REF-7",
  "References.1.Section": "Chapter 5, \"Public Enemy #1: The Buffer Overrun\" Page 127; Chapter 14, \"Prevent I18N Buffer Overruns\" Page 441",
  "References.1.Authors.0": "Michael Howard",
  "References.1.Authors.1": "David LeBlanc",
  "References.1.Title": "Writing Secure Code",
  "References.1.Edition": "2nd Edition",
  "References.1.PublicationYear": "2002",
  "References.1.PublicationMonth": "12",
  "References.1.PublicationDay": "04",
  "References.1.Publisher": "Microsoft Press",
  "References.1.URL": "https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223",
  "References.2.ExternalReferenceID": "REF-56",
  "References.2.Authors.0": "Microsoft",
  "References.2.Title": "Using the Strsafe.h Functions",
  "References.2.URL": "https://learn.microsoft.com/en-us/windows/win32/menurc/strsafe-ovw?redirectedfrom=MSDN",
  "References.2.URLDate": "2023-04-07",
  "References.3.ExternalReferenceID": "REF-57",
  "References.3.Authors.0": "Matt Messier",
  "References.3.Authors.1": "John Viega",
  "References.3.Title": "Safe C String Library v1.0.3",
  "References.3.URL": "http://www.gnu-darwin.org/www001/ports-1.5a-CURRENT/devel/safestr/work/safestr-1.0.3/doc/safestr.html",
  "References.3.URLDate": "2023-04-07",
  "References.4.ExternalReferenceID": "REF-58",
  "References.4.Authors.0": "Michael Howard",
  "References.4.Title": "Address Space Layout Randomization in Windows Vista",
  "References.4.URL": "https://learn.microsoft.com/en-us/archive/blogs/michael_howard/address-space-layout-randomization-in-windows-vista",
  "References.4.URLDate": "2023-04-07",
  "References.5.ExternalReferenceID": "REF-59",
  "References.5.Authors.0": "Arjan van de Ven",
  "References.5.Title": "Limiting buffer overflows with ExecShield",
  "References.5.URL": "https://archive.is/saAFo",
  "References.5.URLDate": "2023-04-07",
  "References.6.ExternalReferenceID": "REF-60",
  "References.6.Title": "PaX",
  "References.6.URL": "https://en.wikipedia.org/wiki/Executable_space_protection#PaX",
  "References.6.URLDate": "2023-04-07",
  "References.7.ExternalReferenceID": "REF-61",
  "References.7.Authors.0": "Microsoft",
  "References.7.Title": "Understanding DEP as a mitigation technology part 1",
  "References.7.URL": "https://msrc.microsoft.com/blog/2009/06/understanding-dep-as-a-mitigation-technology-part-1/",
  "References.7.URLDate": "2023-04-07",
  "References.8.ExternalReferenceID": "REF-62",
  "References.8.Section": "Chapter 5, \"Memory Corruption\", Page 167",
  "References.8.Authors.0": "Mark Dowd",
  "References.8.Authors.1": "John McDonald",
  "References.8.Authors.2": "Justin Schuh",
  "References.8.Title": "The Art of Software Security Assessment",
  "References.8.Edition": "1st Edition",
  "References.8.PublicationYear": "2006",
  "References.8.Publisher": "Addison Wesley",
  "References.9.ExternalReferenceID": "REF-64",
  "References.9.Authors.0": "Grant Murphy",
  "References.9.Title": "Position Independent Executables (PIE)",
  "References.9.PublicationYear": "2012",
  "References.9.PublicationMonth": "11",
  "References.9.PublicationDay": "28",
  "References.9.Publisher": "Red Hat",
  "References.9.URL": "https://www.redhat.com/en/blog/position-independent-executables-pie",
  "References.9.URLDate": "2023-04-07",
  "References.10.ExternalReferenceID": "REF-1332",
  "References.10.Authors.0": "John Richard Moser",
  "References.10.Title": "Prelink and address space randomization",
  "References.10.PublicationYear": "2006",
  "References.10.PublicationMonth": "07",
  "References.10.PublicationDay": "05",
  "References.10.URL": "https://lwn.net/Articles/190139/",
  "References.10.URLDate": "2023-04-26",
  "References.11.ExternalReferenceID": "REF-1333",
  "References.11.Authors.0": "Dmitry Evtyushkin, Dmitry Ponomarev, Nael Abu-Ghazaleh",
  "References.11.Title": "Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR",
  "References.11.PublicationYear": "2016",
  "References.11.URL": "http://www.cs.ucr.edu/~nael/pubs/micro16.pdf",
  "References.11.URLDate": "2023-04-26",
  "References.12.ExternalReferenceID": "REF-1334",
  "References.12.Authors.0": "D3FEND",
  "References.12.Title": "Stack Frame Canary Validation (D3-SFCV)",
  "References.12.PublicationYear": "2023",
  "References.12.URL": "https://d3fend.mitre.org/technique/d3f:StackFrameCanaryValidation/",
  "References.12.URLDate": "2023-04-26",
  "References.13.ExternalReferenceID": "REF-1335",
  "References.13.Authors.0": "D3FEND",
  "References.13.Title": "Segment Address Offset Randomization (D3-SAOR)",
  "References.13.PublicationYear": "2023",
  "References.13.URL": "https://d3fend.mitre.org/technique/d3f:SegmentAddressOffsetRandomization/",
  "References.13.URLDate": "2023-04-26",
  "References.14.ExternalReferenceID": "REF-1336",
  "References.14.Authors.0": "D3FEND",
  "References.14.Title": "Process Segment Execution Prevention (D3-PSEP)",
  "References.14.PublicationYear": "2023",
  "References.14.URL": "https://d3fend.mitre.org/technique/d3f:ProcessSegmentExecutionPrevention/",
  "References.14.URLDate": "2023-04-26",
  "References.15.ExternalReferenceID": "REF-1337",
  "References.15.Section": "Memory information leaks",
  "References.15.Authors.0": "Alexander Sotirov and Mark Dowd",
  "References.15.Title": "Bypassing Browser Memory Protections: Setting back browser security by 10 years",
  "References.15.PublicationYear": "2008",
  "References.15.URL": "https://www.blackhat.com/presentations/bh-usa-08/Sotirov_Dowd/bh08-sotirov-dowd.pdf",
  "References.15.URLDate": "2023-04-26",
  "MappingNotes.Usage": "Discouraged",
  "MappingNotes.Rationale": "CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.",
  "MappingNotes.Comments": "Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.",
  "MappingNotes.Reasons.0": "Frequent Misuse",
  "Notes.0.Type": "Applicable Platform",
  "Notes.0.Note": "\n\nIt is possible in any programming languages without memory management support to attempt an operation outside of the bounds of a memory buffer, but the consequences will vary widely depending on the language, platform, and chip architecture.\n",
  "ContentHistory.0.Type": "Submission",
  "ContentHistory.0.SubmissionName": "PLOVER",
  "ContentHistory.0.SubmissionDate": "2006-07-19",
  "ContentHistory.0.SubmissionVersion": "Draft 3",
  "ContentHistory.0.SubmissionReleaseDate": "2006-07-19",
  "ContentHistory.1.Type": "Modification",
  "ContentHistory.1.ModificationName": "Eric Dalci",
  "ContentHistory.1.ModificationOrganization": "Cigital",
  "ContentHistory.1.ModificationDate": "2008-07-01",
  "ContentHistory.1.ModificationComment": "updated Time_of_Introduction",
  "ContentHistory.2.Type": "Modification",
  "ContentHistory.2.ModificationOrganization": "Veracode",
  "ContentHistory.2.ModificationDate": "2008-08-15",
  "ContentHistory.2.ModificationComment": "Suggested OWASP Top Ten 2004 mapping",
  "ContentHistory.3.Type": "Modification",
  "ContentHistory.3.ModificationName": "CWE Content Team",
  "ContentHistory.3.ModificationOrganization": "MITRE",
  "ContentHistory.3.ModificationDate": "2008-09-08",
  "ContentHistory.3.ModificationComment": "updated Description, Relationships, Taxonomy_Mappings",
  "ContentHistory.4.Type": "Modification",
  "ContentHistory.4.ModificationName": "CWE Content Team",
  "ContentHistory.4.ModificationOrganization": "MITRE",
  "ContentHistory.4.ModificationDate": "2008-10-14",
  "ContentHistory.4.ModificationComment": "updated Relationships",
  "ContentHistory.5.Type": "Modification",
  "ContentHistory.5.ModificationName": "CWE Content Team",
  "ContentHistory.5.ModificationOrganization": "MITRE",
  "ContentHistory.5.ModificationDate": "2008-11-24",
  "ContentHistory.5.ModificationComment": "updated Relationships, Taxonomy_Mappings",
  "ContentHistory.6.Type": "Modification",
  "ContentHistory.6.ModificationName": "CWE Content Team",
  "ContentHistory.6.ModificationOrganization": "MITRE",
  "ContentHistory.6.ModificationDate": "2009-01-12",
  "ContentHistory.6.ModificationComment": "updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Likelihood_of_Exploit, Name, Potential_Mitigations, References, Relationships",
  "ContentHistory.7.Type": "Modification",
  "ContentHistory.7.ModificationName": "CWE Content Team",
  "ContentHistory.7.ModificationOrganization": "MITRE",
  "ContentHistory.7.ModificationDate": "2009-03-10",
  "ContentHistory.7.ModificationComment": "updated Potential_Mitigations",
  "ContentHistory.8.Type": "Modification",
  "ContentHistory.8.ModificationName": "CWE Content Team",
  "ContentHistory.8.ModificationOrganization": "MITRE",
  "ContentHistory.8.ModificationDate": "2009-05-27",
  "ContentHistory.8.ModificationComment": "updated Demonstrative_Examples",
  "ContentHistory.9.Type": "Modification",
  "ContentHistory.9.ModificationName": "CWE Content Team",
  "ContentHistory.9.ModificationOrganization": "MITRE",
  "ContentHistory.9.ModificationDate": "2009-07-27",
  "ContentHistory.9.ModificationComment": "updated Observed_Examples",
  "ContentHistory.10.Type": "Modification",
  "ContentHistory.10.ModificationName": "CWE Content Team",
  "ContentHistory.10.ModificationOrganization": "MITRE",
  "ContentHistory.10.ModificationDate": "2009-10-29",
  "ContentHistory.10.ModificationComment": "updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Relationships, Time_of_Introduction",
  "ContentHistory.11.Type": "Modification",
  "ContentHistory.11.ModificationName": "CWE Content Team",
  "ContentHistory.11.ModificationOrganization": "MITRE",
  "ContentHistory.11.ModificationDate": "2009-12-28",
  "ContentHistory.11.ModificationComment": "updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Observed_Examples",
  "ContentHistory.12.Type": "Modification",
  "ContentHistory.12.ModificationName": "CWE Content Team",
  "ContentHistory.12.ModificationOrganization": "MITRE",
  "ContentHistory.12.ModificationDate": "2010-02-16",
  "ContentHistory.12.ModificationComment": "updated Alternate_Terms, Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings",
  "ContentHistory.13.Type": "Modification",
  "ContentHistory.13.ModificationName": "CWE Content Team",
  "ContentHistory.13.ModificationOrganization": "MITRE",
  "ContentHistory.13.ModificationDate": "2010-06-21",
  "ContentHistory.13.ModificationComment": "updated Potential_Mitigations",
  "ContentHistory.14.Type": "Modification",
  "ContentHistory.14.ModificationName": "CWE Content Team",
  "ContentHistory.14.ModificationOrganization": "MITRE",
  "ContentHistory.14.ModificationDate": "2010-09-27",
  "ContentHistory.14.ModificationComment": "updated Potential_Mitigations, Relationships",
  "ContentHistory.15.Type": "Modification",
  "ContentHistory.15.ModificationName": "CWE Content Team",
  "ContentHistory.15.ModificationOrganization": "MITRE",
  "ContentHistory.15.ModificationDate": "2010-12-13",
  "ContentHistory.15.ModificationComment": "updated Name",
  "ContentHistory.16.Type": "Modification",
  "ContentHistory.16.ModificationName": "CWE Content Team",
  "ContentHistory.16.ModificationOrganization": "MITRE",
  "ContentHistory.16.ModificationDate": "2011-03-29",
  "ContentHistory.16.ModificationComment": "updated Relationships",
  "ContentHistory.17.Type": "Modification",
  "ContentHistory.17.ModificationName": "CWE Content Team",
  "ContentHistory.17.ModificationOrganization": "MITRE",
  "ContentHistory.17.ModificationDate": "2011-06-01",
  "ContentHistory.17.ModificationComment": "updated Common_Consequences, Relationships",
  "ContentHistory.18.Type": "Modification",
  "ContentHistory.18.ModificationName": "CWE Content Team",
  "ContentHistory.18.ModificationOrganization": "MITRE",
  "ContentHistory.18.ModificationDate": "2011-09-13",
  "ContentHistory.18.ModificationComment": "updated Relationships, Taxonomy_Mappings",
  "ContentHistory.19.Type": "Modification",
  "ContentHistory.19.ModificationName": "CWE Content Team",
  "ContentHistory.19.ModificationOrganization": "MITRE",
  "ContentHistory.19.ModificationDate": "2012-05-11",
  "ContentHistory.19.ModificationComment": "updated Demonstrative_Examples, Potential_Mitigations, References, Relationships",
  "ContentHistory.20.Type": "Modification",
  "ContentHistory.20.ModificationName": "CWE Content Team",
  "ContentHistory.20.ModificationOrganization": "MITRE",
  "ContentHistory.20.ModificationDate": "2012-10-30",
  "ContentHistory.20.ModificationComment": "updated Potential_Mitigations",
  "ContentHistory.21.Type": "Modification",
  "ContentHistory.21.ModificationName": "CWE Content Team",
  "ContentHistory.21.ModificationOrganization": "MITRE",
  "ContentHistory.21.ModificationDate": "2013-02-21",
  "ContentHistory.21.ModificationComment": "updated Demonstrative_Examples",
  "ContentHistory.22.Type": "Modification",
  "ContentHistory.22.ModificationName": "CWE Content Team",
  "ContentHistory.22.ModificationOrganization": "MITRE",
  "ContentHistory.22.ModificationDate": "2014-02-18",
  "ContentHistory.22.ModificationComment": "updated Potential_Mitigations, References",
  "ContentHistory.23.Type": "Modification",
  "ContentHistory.23.ModificationName": "CWE Content Team",
  "ContentHistory.23.ModificationOrganization": "MITRE",
  "ContentHistory.23.ModificationDate": "2014-07-30",
  "ContentHistory.23.ModificationComment": "updated Detection_Factors, Relationships, Taxonomy_Mappings",
  "ContentHistory.24.Type": "Modification",
  "ContentHistory.24.ModificationName": "CWE Content Team",
  "ContentHistory.24.ModificationOrganization": "MITRE",
  "ContentHistory.24.ModificationDate": "2015-12-07",
  "ContentHistory.24.ModificationComment": "updated Relationships",
  "ContentHistory.25.Type": "Modification",
  "ContentHistory.25.ModificationName": "CWE Content Team",
  "ContentHistory.25.ModificationOrganization": "MITRE",
  "ContentHistory.25.ModificationDate": "2017-01-19",
  "ContentHistory.25.ModificationComment": "updated Relationships",
  "ContentHistory.26.Type": "Modification",
  "ContentHistory.26.ModificationName": "CWE Content Team",
  "ContentHistory.26.ModificationOrganization": "MITRE",
  "ContentHistory.26.ModificationDate": "2017-05-03",
  "ContentHistory.26.ModificationComment": "updated Relationships",
  "ContentHistory.27.Type": "Modification",
  "ContentHistory.27.ModificationName": "CWE Content Team",
  "ContentHistory.27.ModificationOrganization": "MITRE",
  "ContentHistory.27.ModificationDate": "2017-11-08",
  "ContentHistory.27.ModificationComment": "updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships, Taxonomy_Mappings",
  "ContentHistory.28.Type": "Modification",
  "ContentHistory.28.ModificationName": "CWE Content Team",
  "ContentHistory.28.ModificationOrganization": "MITRE",
  "ContentHistory.28.ModificationDate": "2018-03-27",
  "ContentHistory.28.ModificationComment": "updated References",
  "ContentHistory.29.Type": "Modification",
  "ContentHistory.29.ModificationName": "CWE Content Team",
  "ContentHistory.29.ModificationOrganization": "MITRE",
  "ContentHistory.29.ModificationDate": "2019-01-03",
  "ContentHistory.29.ModificationComment": "updated Relationships",
  "ContentHistory.30.Type": "Modification",
  "ContentHistory.30.ModificationName": "CWE Content Team",
  "ContentHistory.30.ModificationOrganization": "MITRE",
  "ContentHistory.30.ModificationDate": "2019-06-20",
  "ContentHistory.30.ModificationComment": "updated Related_Attack_Patterns, Relationships",
  "ContentHistory.31.Type": "Modification",
  "ContentHistory.31.ModificationName": "CWE Content Team",
  "ContentHistory.31.ModificationOrganization": "MITRE",
  "ContentHistory.31.ModificationDate": "2019-09-19",
  "ContentHistory.31.ModificationComment": "updated References, Relationships",
  "ContentHistory.32.Type": "Modification",
  "ContentHistory.32.ModificationName": "CWE Content Team",
  "ContentHistory.32.ModificationOrganization": "MITRE",
  "ContentHistory.32.ModificationDate": "2020-02-24",
  "ContentHistory.32.ModificationComment": "updated Relationships, Taxonomy_Mappings, Time_of_Introduction",
  "ContentHistory.33.Type": "Modification",
  "ContentHistory.33.ModificationName": "CWE Content Team",
  "ContentHistory.33.ModificationOrganization": "MITRE",
  "ContentHistory.33.ModificationDate": "2020-06-25",
  "ContentHistory.33.ModificationComment": "updated Relationships",
  "ContentHistory.34.Type": "Modification",
  "ContentHistory.34.ModificationName": "CWE Content Team",
  "ContentHistory.34.ModificationOrganization": "MITRE",
  "ContentHistory.34.ModificationDate": "2020-08-20",
  "ContentHistory.34.ModificationComment": "updated Alternate_Terms, Relationships",
  "ContentHistory.35.Type": "Modification",
  "ContentHistory.35.ModificationName": "CWE Content Team",
  "ContentHistory.35.ModificationOrganization": "MITRE",
  "ContentHistory.35.ModificationDate": "2020-12-10",
  "ContentHistory.35.ModificationComment": "updated Alternate_Terms, Observed_Examples, Relationships",
  "ContentHistory.36.Type": "Modification",
  "ContentHistory.36.ModificationName": "CWE Content Team",
  "ContentHistory.36.ModificationOrganization": "MITRE",
  "ContentHistory.36.ModificationDate": "2021-07-20",
  "ContentHistory.36.ModificationComment": "updated Demonstrative_Examples, Observed_Examples, Potential_Mitigations, Relationships",
  "ContentHistory.37.Type": "Modification",
  "ContentHistory.37.ModificationName": "CWE Content Team",
  "ContentHistory.37.ModificationOrganization": "MITRE",
  "ContentHistory.37.ModificationDate": "2022-06-28",
  "ContentHistory.37.ModificationComment": "updated Observed_Examples, Relationships",
  "ContentHistory.38.Type": "Modification",
  "ContentHistory.38.ModificationName": "CWE Content Team",
  "ContentHistory.38.ModificationOrganization": "MITRE",
  "ContentHistory.38.ModificationDate": "2022-10-13",
  "ContentHistory.38.ModificationComment": "updated Relationships, Taxonomy_Mappings",
  "ContentHistory.39.Type": "Modification",
  "ContentHistory.39.ModificationName": "CWE Content Team",
  "ContentHistory.39.ModificationOrganization": "MITRE",
  "ContentHistory.39.ModificationDate": "2023-01-31",
  "ContentHistory.39.ModificationComment": "updated Alternate_Terms, Description",
  "ContentHistory.40.Type": "Modification",
  "ContentHistory.40.ModificationName": "CWE Content Team",
  "ContentHistory.40.ModificationOrganization": "MITRE",
  "ContentHistory.40.ModificationDate": "2023-04-27",
  "ContentHistory.40.ModificationComment": "updated Potential_Mitigations, References, Relationships, Time_of_Introduction",
  "ContentHistory.41.Type": "Modification",
  "ContentHistory.41.ModificationName": "CWE Content Team",
  "ContentHistory.41.ModificationOrganization": "MITRE",
  "ContentHistory.41.ModificationDate": "2023-06-29",
  "ContentHistory.41.ModificationComment": "updated Mapping_Notes, Relationships",
  "ContentHistory.42.Type": "Modification",
  "ContentHistory.42.ModificationName": "CWE Content Team",
  "ContentHistory.42.ModificationOrganization": "MITRE",
  "ContentHistory.42.ModificationDate": "2024-07-16",
  "ContentHistory.42.ModificationComment": "updated Alternate_Terms, Background_Details, Common_Consequences, Description, Diagram",
  "ContentHistory.42.ModificationVersion": "4.15",
  "ContentHistory.42.ModificationReleaseDate": "2024-07-16",
  "ContentHistory.43.Type": "Modification",
  "ContentHistory.43.ModificationName": "CWE Content Team",
  "ContentHistory.43.ModificationOrganization": "MITRE",
  "ContentHistory.43.ModificationDate": "2024-11-19",
  "ContentHistory.43.ModificationComment": "updated Description, Relationships",
  "ContentHistory.43.ModificationVersion": "4.16",
  "ContentHistory.43.ModificationReleaseDate": "2024-11-19",
  "ContentHistory.44.Type": "Modification",
  "ContentHistory.44.ModificationName": "CWE Content Team",
  "ContentHistory.44.ModificationOrganization": "MITRE",
  "ContentHistory.44.ModificationDate": "2025-04-03",
  "ContentHistory.44.ModificationComment": "updated Relationships",
  "ContentHistory.44.ModificationVersion": "4.17",
  "ContentHistory.44.ModificationReleaseDate": "2025-04-03",
  "ContentHistory.45.Type": "Contribution",
  "ContentHistory.45.ContributionName": "Abhi Balakrishnan",
  "ContentHistory.45.ContributionDate": "2024-02-29",
  "ContentHistory.45.ContributionComment": "Provided diagram to improve CWE usability",
  "ContentHistory.45.ContributionType": "Content",
  "ContentHistory.45.ContributionVersion": "4.15",
  "ContentHistory.45.ContributionReleaseDate": "2024-07-16",
  "ContentHistory.46.Type": "Rename",
  "ContentHistory.46.PreviousEntryName": "Buffer Errors",
  "ContentHistory.46.Date": "2008-04-11",
  "ContentHistory.47.Type": "Rename",
  "ContentHistory.47.PreviousEntryName": "Failure to Constrain Operations within the Bounds of an Allocated Memory Buffer",
  "ContentHistory.47.Date": "2009-01-12",
  "ContentHistory.48.Type": "Rename",
  "ContentHistory.48.PreviousEntryName": "Failure to Constrain Operations within the Bounds of a Memory Buffer",
  "ContentHistory.48.Date": "2010-12-13"
}